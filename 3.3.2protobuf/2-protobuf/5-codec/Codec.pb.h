// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Codec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Codec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Codec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Codec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Codec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Codec_2eproto;
namespace Codec {
class THasitem;
class THasitemDefaultTypeInternal;
extern THasitemDefaultTypeInternal _THasitem_default_instance_;
class TRepeatedfields;
class TRepeatedfieldsDefaultTypeInternal;
extern TRepeatedfieldsDefaultTypeInternal _TRepeatedfields_default_instance_;
class Tbool;
class TboolDefaultTypeInternal;
extern TboolDefaultTypeInternal _Tbool_default_instance_;
class Tbytes;
class TbytesDefaultTypeInternal;
extern TbytesDefaultTypeInternal _Tbytes_default_instance_;
class Tdouble;
class TdoubleDefaultTypeInternal;
extern TdoubleDefaultTypeInternal _Tdouble_default_instance_;
class Tembeddedmessages;
class TembeddedmessagesDefaultTypeInternal;
extern TembeddedmessagesDefaultTypeInternal _Tembeddedmessages_default_instance_;
class Tembeddedmessages_TMsg;
class Tembeddedmessages_TMsgDefaultTypeInternal;
extern Tembeddedmessages_TMsgDefaultTypeInternal _Tembeddedmessages_TMsg_default_instance_;
class Tenum;
class TenumDefaultTypeInternal;
extern TenumDefaultTypeInternal _Tenum_default_instance_;
class Tfixed32;
class Tfixed32DefaultTypeInternal;
extern Tfixed32DefaultTypeInternal _Tfixed32_default_instance_;
class Tfixed64;
class Tfixed64DefaultTypeInternal;
extern Tfixed64DefaultTypeInternal _Tfixed64_default_instance_;
class Tfloat;
class TfloatDefaultTypeInternal;
extern TfloatDefaultTypeInternal _Tfloat_default_instance_;
class Tint32;
class Tint32DefaultTypeInternal;
extern Tint32DefaultTypeInternal _Tint32_default_instance_;
class Tint64;
class Tint64DefaultTypeInternal;
extern Tint64DefaultTypeInternal _Tint64_default_instance_;
class Tsfixed32;
class Tsfixed32DefaultTypeInternal;
extern Tsfixed32DefaultTypeInternal _Tsfixed32_default_instance_;
class Tsfixed64;
class Tsfixed64DefaultTypeInternal;
extern Tsfixed64DefaultTypeInternal _Tsfixed64_default_instance_;
class Tsint32;
class Tsint32DefaultTypeInternal;
extern Tsint32DefaultTypeInternal _Tsint32_default_instance_;
class Tsint64;
class Tsint64DefaultTypeInternal;
extern Tsint64DefaultTypeInternal _Tsint64_default_instance_;
class Tstring;
class TstringDefaultTypeInternal;
extern TstringDefaultTypeInternal _Tstring_default_instance_;
class Tuint32;
class Tuint32DefaultTypeInternal;
extern Tuint32DefaultTypeInternal _Tuint32_default_instance_;
class Tuint64;
class Tuint64DefaultTypeInternal;
extern Tuint64DefaultTypeInternal _Tuint64_default_instance_;
}  // namespace Codec
PROTOBUF_NAMESPACE_OPEN
template<> ::Codec::THasitem* Arena::CreateMaybeMessage<::Codec::THasitem>(Arena*);
template<> ::Codec::TRepeatedfields* Arena::CreateMaybeMessage<::Codec::TRepeatedfields>(Arena*);
template<> ::Codec::Tbool* Arena::CreateMaybeMessage<::Codec::Tbool>(Arena*);
template<> ::Codec::Tbytes* Arena::CreateMaybeMessage<::Codec::Tbytes>(Arena*);
template<> ::Codec::Tdouble* Arena::CreateMaybeMessage<::Codec::Tdouble>(Arena*);
template<> ::Codec::Tembeddedmessages* Arena::CreateMaybeMessage<::Codec::Tembeddedmessages>(Arena*);
template<> ::Codec::Tembeddedmessages_TMsg* Arena::CreateMaybeMessage<::Codec::Tembeddedmessages_TMsg>(Arena*);
template<> ::Codec::Tenum* Arena::CreateMaybeMessage<::Codec::Tenum>(Arena*);
template<> ::Codec::Tfixed32* Arena::CreateMaybeMessage<::Codec::Tfixed32>(Arena*);
template<> ::Codec::Tfixed64* Arena::CreateMaybeMessage<::Codec::Tfixed64>(Arena*);
template<> ::Codec::Tfloat* Arena::CreateMaybeMessage<::Codec::Tfloat>(Arena*);
template<> ::Codec::Tint32* Arena::CreateMaybeMessage<::Codec::Tint32>(Arena*);
template<> ::Codec::Tint64* Arena::CreateMaybeMessage<::Codec::Tint64>(Arena*);
template<> ::Codec::Tsfixed32* Arena::CreateMaybeMessage<::Codec::Tsfixed32>(Arena*);
template<> ::Codec::Tsfixed64* Arena::CreateMaybeMessage<::Codec::Tsfixed64>(Arena*);
template<> ::Codec::Tsint32* Arena::CreateMaybeMessage<::Codec::Tsint32>(Arena*);
template<> ::Codec::Tsint64* Arena::CreateMaybeMessage<::Codec::Tsint64>(Arena*);
template<> ::Codec::Tstring* Arena::CreateMaybeMessage<::Codec::Tstring>(Arena*);
template<> ::Codec::Tuint32* Arena::CreateMaybeMessage<::Codec::Tuint32>(Arena*);
template<> ::Codec::Tuint64* Arena::CreateMaybeMessage<::Codec::Tuint64>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Codec {

enum PhoneType : int {
  PHONE_DEFAULT = 0,
  PHONE_HOME = 1,
  PHONE_WORK = 2,
  PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PhoneType_IsValid(int value);
constexpr PhoneType PhoneType_MIN = PHONE_DEFAULT;
constexpr PhoneType PhoneType_MAX = PHONE_WORK;
constexpr int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneType_descriptor();
template<typename T>
inline const std::string& PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhoneType_descriptor(), enum_t_value);
}
inline bool PhoneType_Parse(
    const std::string& name, PhoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class Tint32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tint32) */ {
 public:
  Tint32();
  virtual ~Tint32();

  Tint32(const Tint32& from);
  Tint32(Tint32&& from) noexcept
    : Tint32() {
    *this = ::std::move(from);
  }

  inline Tint32& operator=(const Tint32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tint32& operator=(Tint32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tint32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tint32* internal_default_instance() {
    return reinterpret_cast<const Tint32*>(
               &_Tint32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Tint32* other);
  friend void swap(Tint32& a, Tint32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tint32* New() const final {
    return CreateMaybeMessage<Tint32>(nullptr);
  }

  Tint32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tint32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tint32& from);
  void MergeFrom(const Tint32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tint32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tint32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Codec.Tint32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tint64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tint64) */ {
 public:
  Tint64();
  virtual ~Tint64();

  Tint64(const Tint64& from);
  Tint64(Tint64&& from) noexcept
    : Tint64() {
    *this = ::std::move(from);
  }

  inline Tint64& operator=(const Tint64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tint64& operator=(Tint64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tint64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tint64* internal_default_instance() {
    return reinterpret_cast<const Tint64*>(
               &_Tint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Tint64* other);
  friend void swap(Tint64& a, Tint64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tint64* New() const final {
    return CreateMaybeMessage<Tint64>(nullptr);
  }

  Tint64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tint64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tint64& from);
  void MergeFrom(const Tint64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tint64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tint64";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Codec.Tint64)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tuint32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tuint32) */ {
 public:
  Tuint32();
  virtual ~Tuint32();

  Tuint32(const Tuint32& from);
  Tuint32(Tuint32&& from) noexcept
    : Tuint32() {
    *this = ::std::move(from);
  }

  inline Tuint32& operator=(const Tuint32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tuint32& operator=(Tuint32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tuint32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tuint32* internal_default_instance() {
    return reinterpret_cast<const Tuint32*>(
               &_Tuint32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Tuint32* other);
  friend void swap(Tuint32& a, Tuint32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tuint32* New() const final {
    return CreateMaybeMessage<Tuint32>(nullptr);
  }

  Tuint32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tuint32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tuint32& from);
  void MergeFrom(const Tuint32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tuint32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tuint32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Codec.Tuint32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tuint64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tuint64) */ {
 public:
  Tuint64();
  virtual ~Tuint64();

  Tuint64(const Tuint64& from);
  Tuint64(Tuint64&& from) noexcept
    : Tuint64() {
    *this = ::std::move(from);
  }

  inline Tuint64& operator=(const Tuint64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tuint64& operator=(Tuint64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tuint64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tuint64* internal_default_instance() {
    return reinterpret_cast<const Tuint64*>(
               &_Tuint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Tuint64* other);
  friend void swap(Tuint64& a, Tuint64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tuint64* New() const final {
    return CreateMaybeMessage<Tuint64>(nullptr);
  }

  Tuint64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tuint64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tuint64& from);
  void MergeFrom(const Tuint64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tuint64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tuint64";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Codec.Tuint64)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tsint32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tsint32) */ {
 public:
  Tsint32();
  virtual ~Tsint32();

  Tsint32(const Tsint32& from);
  Tsint32(Tsint32&& from) noexcept
    : Tsint32() {
    *this = ::std::move(from);
  }

  inline Tsint32& operator=(const Tsint32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsint32& operator=(Tsint32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsint32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsint32* internal_default_instance() {
    return reinterpret_cast<const Tsint32*>(
               &_Tsint32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Tsint32* other);
  friend void swap(Tsint32& a, Tsint32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tsint32* New() const final {
    return CreateMaybeMessage<Tsint32>(nullptr);
  }

  Tsint32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsint32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsint32& from);
  void MergeFrom(const Tsint32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsint32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tsint32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sint32 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Codec.Tsint32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tsint64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tsint64) */ {
 public:
  Tsint64();
  virtual ~Tsint64();

  Tsint64(const Tsint64& from);
  Tsint64(Tsint64&& from) noexcept
    : Tsint64() {
    *this = ::std::move(from);
  }

  inline Tsint64& operator=(const Tsint64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsint64& operator=(Tsint64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsint64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsint64* internal_default_instance() {
    return reinterpret_cast<const Tsint64*>(
               &_Tsint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Tsint64* other);
  friend void swap(Tsint64& a, Tsint64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tsint64* New() const final {
    return CreateMaybeMessage<Tsint64>(nullptr);
  }

  Tsint64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsint64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsint64& from);
  void MergeFrom(const Tsint64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsint64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tsint64";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sint64 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Codec.Tsint64)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tbool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tbool) */ {
 public:
  Tbool();
  virtual ~Tbool();

  Tbool(const Tbool& from);
  Tbool(Tbool&& from) noexcept
    : Tbool() {
    *this = ::std::move(from);
  }

  inline Tbool& operator=(const Tbool& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tbool& operator=(Tbool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tbool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tbool* internal_default_instance() {
    return reinterpret_cast<const Tbool*>(
               &_Tbool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Tbool* other);
  friend void swap(Tbool& a, Tbool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tbool* New() const final {
    return CreateMaybeMessage<Tbool>(nullptr);
  }

  Tbool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tbool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tbool& from);
  void MergeFrom(const Tbool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tbool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tbool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  bool n1() const;
  void set_n1(bool value);

  // @@protoc_insertion_point(class_scope:Codec.Tbool)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tenum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tenum) */ {
 public:
  Tenum();
  virtual ~Tenum();

  Tenum(const Tenum& from);
  Tenum(Tenum&& from) noexcept
    : Tenum() {
    *this = ::std::move(from);
  }

  inline Tenum& operator=(const Tenum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tenum& operator=(Tenum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tenum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tenum* internal_default_instance() {
    return reinterpret_cast<const Tenum*>(
               &_Tenum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Tenum* other);
  friend void swap(Tenum& a, Tenum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tenum* New() const final {
    return CreateMaybeMessage<Tenum>(nullptr);
  }

  Tenum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tenum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tenum& from);
  void MergeFrom(const Tenum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tenum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tenum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Codec.PhoneType n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::Codec::PhoneType n1() const;
  void set_n1(::Codec::PhoneType value);

  // @@protoc_insertion_point(class_scope:Codec.Tenum)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tfixed64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tfixed64) */ {
 public:
  Tfixed64();
  virtual ~Tfixed64();

  Tfixed64(const Tfixed64& from);
  Tfixed64(Tfixed64&& from) noexcept
    : Tfixed64() {
    *this = ::std::move(from);
  }

  inline Tfixed64& operator=(const Tfixed64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tfixed64& operator=(Tfixed64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tfixed64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tfixed64* internal_default_instance() {
    return reinterpret_cast<const Tfixed64*>(
               &_Tfixed64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Tfixed64* other);
  friend void swap(Tfixed64& a, Tfixed64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tfixed64* New() const final {
    return CreateMaybeMessage<Tfixed64>(nullptr);
  }

  Tfixed64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tfixed64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tfixed64& from);
  void MergeFrom(const Tfixed64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tfixed64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tfixed64";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed64 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Codec.Tfixed64)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tsfixed64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tsfixed64) */ {
 public:
  Tsfixed64();
  virtual ~Tsfixed64();

  Tsfixed64(const Tsfixed64& from);
  Tsfixed64(Tsfixed64&& from) noexcept
    : Tsfixed64() {
    *this = ::std::move(from);
  }

  inline Tsfixed64& operator=(const Tsfixed64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsfixed64& operator=(Tsfixed64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsfixed64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsfixed64* internal_default_instance() {
    return reinterpret_cast<const Tsfixed64*>(
               &_Tsfixed64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Tsfixed64* other);
  friend void swap(Tsfixed64& a, Tsfixed64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tsfixed64* New() const final {
    return CreateMaybeMessage<Tsfixed64>(nullptr);
  }

  Tsfixed64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsfixed64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsfixed64& from);
  void MergeFrom(const Tsfixed64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsfixed64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tsfixed64";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed64 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Codec.Tsfixed64)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tdouble :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tdouble) */ {
 public:
  Tdouble();
  virtual ~Tdouble();

  Tdouble(const Tdouble& from);
  Tdouble(Tdouble&& from) noexcept
    : Tdouble() {
    *this = ::std::move(from);
  }

  inline Tdouble& operator=(const Tdouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tdouble& operator=(Tdouble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tdouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tdouble* internal_default_instance() {
    return reinterpret_cast<const Tdouble*>(
               &_Tdouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Tdouble* other);
  friend void swap(Tdouble& a, Tdouble& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tdouble* New() const final {
    return CreateMaybeMessage<Tdouble>(nullptr);
  }

  Tdouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tdouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tdouble& from);
  void MergeFrom(const Tdouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tdouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tdouble";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  double n1() const;
  void set_n1(double value);

  // @@protoc_insertion_point(class_scope:Codec.Tdouble)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tstring :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tstring) */ {
 public:
  Tstring();
  virtual ~Tstring();

  Tstring(const Tstring& from);
  Tstring(Tstring&& from) noexcept
    : Tstring() {
    *this = ::std::move(from);
  }

  inline Tstring& operator=(const Tstring& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tstring& operator=(Tstring&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tstring& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tstring* internal_default_instance() {
    return reinterpret_cast<const Tstring*>(
               &_Tstring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Tstring* other);
  friend void swap(Tstring& a, Tstring& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tstring* New() const final {
    return CreateMaybeMessage<Tstring>(nullptr);
  }

  Tstring* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tstring>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tstring& from);
  void MergeFrom(const Tstring& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tstring* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tstring";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  const std::string& n1() const;
  void set_n1(const std::string& value);
  void set_n1(std::string&& value);
  void set_n1(const char* value);
  void set_n1(const char* value, size_t size);
  std::string* mutable_n1();
  std::string* release_n1();
  void set_allocated_n1(std::string* n1);

  // @@protoc_insertion_point(class_scope:Codec.Tstring)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tbytes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tbytes) */ {
 public:
  Tbytes();
  virtual ~Tbytes();

  Tbytes(const Tbytes& from);
  Tbytes(Tbytes&& from) noexcept
    : Tbytes() {
    *this = ::std::move(from);
  }

  inline Tbytes& operator=(const Tbytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tbytes& operator=(Tbytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tbytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tbytes* internal_default_instance() {
    return reinterpret_cast<const Tbytes*>(
               &_Tbytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Tbytes* other);
  friend void swap(Tbytes& a, Tbytes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tbytes* New() const final {
    return CreateMaybeMessage<Tbytes>(nullptr);
  }

  Tbytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tbytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tbytes& from);
  void MergeFrom(const Tbytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tbytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tbytes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  const std::string& n1() const;
  void set_n1(const std::string& value);
  void set_n1(std::string&& value);
  void set_n1(const char* value);
  void set_n1(const void* value, size_t size);
  std::string* mutable_n1();
  std::string* release_n1();
  void set_allocated_n1(std::string* n1);

  // @@protoc_insertion_point(class_scope:Codec.Tbytes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tembeddedmessages_TMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tembeddedmessages.TMsg) */ {
 public:
  Tembeddedmessages_TMsg();
  virtual ~Tembeddedmessages_TMsg();

  Tembeddedmessages_TMsg(const Tembeddedmessages_TMsg& from);
  Tembeddedmessages_TMsg(Tembeddedmessages_TMsg&& from) noexcept
    : Tembeddedmessages_TMsg() {
    *this = ::std::move(from);
  }

  inline Tembeddedmessages_TMsg& operator=(const Tembeddedmessages_TMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tembeddedmessages_TMsg& operator=(Tembeddedmessages_TMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tembeddedmessages_TMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tembeddedmessages_TMsg* internal_default_instance() {
    return reinterpret_cast<const Tembeddedmessages_TMsg*>(
               &_Tembeddedmessages_TMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Tembeddedmessages_TMsg* other);
  friend void swap(Tembeddedmessages_TMsg& a, Tembeddedmessages_TMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tembeddedmessages_TMsg* New() const final {
    return CreateMaybeMessage<Tembeddedmessages_TMsg>(nullptr);
  }

  Tembeddedmessages_TMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tembeddedmessages_TMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tembeddedmessages_TMsg& from);
  void MergeFrom(const Tembeddedmessages_TMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tembeddedmessages_TMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tembeddedmessages.TMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Codec.Tembeddedmessages.TMsg)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tembeddedmessages :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tembeddedmessages) */ {
 public:
  Tembeddedmessages();
  virtual ~Tembeddedmessages();

  Tembeddedmessages(const Tembeddedmessages& from);
  Tembeddedmessages(Tembeddedmessages&& from) noexcept
    : Tembeddedmessages() {
    *this = ::std::move(from);
  }

  inline Tembeddedmessages& operator=(const Tembeddedmessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tembeddedmessages& operator=(Tembeddedmessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tembeddedmessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tembeddedmessages* internal_default_instance() {
    return reinterpret_cast<const Tembeddedmessages*>(
               &_Tembeddedmessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Tembeddedmessages* other);
  friend void swap(Tembeddedmessages& a, Tembeddedmessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tembeddedmessages* New() const final {
    return CreateMaybeMessage<Tembeddedmessages>(nullptr);
  }

  Tembeddedmessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tembeddedmessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tembeddedmessages& from);
  void MergeFrom(const Tembeddedmessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tembeddedmessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tembeddedmessages";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Tembeddedmessages_TMsg TMsg;

  // accessors -------------------------------------------------------

  // .Codec.Tembeddedmessages.TMsg n1 = 1;
  bool has_n1() const;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  const ::Codec::Tembeddedmessages_TMsg& n1() const;
  ::Codec::Tembeddedmessages_TMsg* release_n1();
  ::Codec::Tembeddedmessages_TMsg* mutable_n1();
  void set_allocated_n1(::Codec::Tembeddedmessages_TMsg* n1);

  // @@protoc_insertion_point(class_scope:Codec.Tembeddedmessages)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Codec::Tembeddedmessages_TMsg* n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class TRepeatedfields :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.TRepeatedfields) */ {
 public:
  TRepeatedfields();
  virtual ~TRepeatedfields();

  TRepeatedfields(const TRepeatedfields& from);
  TRepeatedfields(TRepeatedfields&& from) noexcept
    : TRepeatedfields() {
    *this = ::std::move(from);
  }

  inline TRepeatedfields& operator=(const TRepeatedfields& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRepeatedfields& operator=(TRepeatedfields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TRepeatedfields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TRepeatedfields* internal_default_instance() {
    return reinterpret_cast<const TRepeatedfields*>(
               &_TRepeatedfields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TRepeatedfields* other);
  friend void swap(TRepeatedfields& a, TRepeatedfields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TRepeatedfields* New() const final {
    return CreateMaybeMessage<TRepeatedfields>(nullptr);
  }

  TRepeatedfields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TRepeatedfields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TRepeatedfields& from);
  void MergeFrom(const TRepeatedfields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRepeatedfields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.TRepeatedfields";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 n1 = 1;
  int n1_size() const;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 n1(int index) const;
  void set_n1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_n1(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      n1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_n1();

  // repeated .Codec.Tbytes n2 = 2;
  int n2_size() const;
  void clear_n2();
  static const int kN2FieldNumber = 2;
  ::Codec::Tbytes* mutable_n2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Codec::Tbytes >*
      mutable_n2();
  const ::Codec::Tbytes& n2(int index) const;
  ::Codec::Tbytes* add_n2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Codec::Tbytes >&
      n2() const;

  // @@protoc_insertion_point(class_scope:Codec.TRepeatedfields)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > n1_;
  mutable std::atomic<int> _n1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Codec::Tbytes > n2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tfixed32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tfixed32) */ {
 public:
  Tfixed32();
  virtual ~Tfixed32();

  Tfixed32(const Tfixed32& from);
  Tfixed32(Tfixed32&& from) noexcept
    : Tfixed32() {
    *this = ::std::move(from);
  }

  inline Tfixed32& operator=(const Tfixed32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tfixed32& operator=(Tfixed32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tfixed32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tfixed32* internal_default_instance() {
    return reinterpret_cast<const Tfixed32*>(
               &_Tfixed32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Tfixed32* other);
  friend void swap(Tfixed32& a, Tfixed32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tfixed32* New() const final {
    return CreateMaybeMessage<Tfixed32>(nullptr);
  }

  Tfixed32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tfixed32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tfixed32& from);
  void MergeFrom(const Tfixed32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tfixed32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tfixed32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Codec.Tfixed32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tsfixed32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tsfixed32) */ {
 public:
  Tsfixed32();
  virtual ~Tsfixed32();

  Tsfixed32(const Tsfixed32& from);
  Tsfixed32(Tsfixed32&& from) noexcept
    : Tsfixed32() {
    *this = ::std::move(from);
  }

  inline Tsfixed32& operator=(const Tsfixed32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsfixed32& operator=(Tsfixed32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsfixed32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsfixed32* internal_default_instance() {
    return reinterpret_cast<const Tsfixed32*>(
               &_Tsfixed32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Tsfixed32* other);
  friend void swap(Tsfixed32& a, Tsfixed32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tsfixed32* New() const final {
    return CreateMaybeMessage<Tsfixed32>(nullptr);
  }

  Tsfixed32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsfixed32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsfixed32& from);
  void MergeFrom(const Tsfixed32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsfixed32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tsfixed32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 n1() const;
  void set_n1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Codec.Tsfixed32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class Tfloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.Tfloat) */ {
 public:
  Tfloat();
  virtual ~Tfloat();

  Tfloat(const Tfloat& from);
  Tfloat(Tfloat&& from) noexcept
    : Tfloat() {
    *this = ::std::move(from);
  }

  inline Tfloat& operator=(const Tfloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tfloat& operator=(Tfloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tfloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tfloat* internal_default_instance() {
    return reinterpret_cast<const Tfloat*>(
               &_Tfloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Tfloat* other);
  friend void swap(Tfloat& a, Tfloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tfloat* New() const final {
    return CreateMaybeMessage<Tfloat>(nullptr);
  }

  Tfloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tfloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tfloat& from);
  void MergeFrom(const Tfloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tfloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.Tfloat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float n1 = 1;
  void clear_n1();
  static const int kN1FieldNumber = 1;
  float n1() const;
  void set_n1(float value);

  // @@protoc_insertion_point(class_scope:Codec.Tfloat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float n1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// -------------------------------------------------------------------

class THasitem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Codec.THasitem) */ {
 public:
  THasitem();
  virtual ~THasitem();

  THasitem(const THasitem& from);
  THasitem(THasitem&& from) noexcept
    : THasitem() {
    *this = ::std::move(from);
  }

  inline THasitem& operator=(const THasitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline THasitem& operator=(THasitem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const THasitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const THasitem* internal_default_instance() {
    return reinterpret_cast<const THasitem*>(
               &_THasitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(THasitem* other);
  friend void swap(THasitem& a, THasitem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline THasitem* New() const final {
    return CreateMaybeMessage<THasitem>(nullptr);
  }

  THasitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<THasitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const THasitem& from);
  void MergeFrom(const THasitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THasitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Codec.THasitem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Codec_2eproto);
    return ::descriptor_table_Codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes n7_bytes = 7;
  void clear_n7_bytes();
  static const int kN7BytesFieldNumber = 7;
  const std::string& n7_bytes() const;
  void set_n7_bytes(const std::string& value);
  void set_n7_bytes(std::string&& value);
  void set_n7_bytes(const char* value);
  void set_n7_bytes(const void* value, size_t size);
  std::string* mutable_n7_bytes();
  std::string* release_n7_bytes();
  void set_allocated_n7_bytes(std::string* n7_bytes);

  // .Codec.Tbytes n8_Tbytes = 8;
  bool has_n8_tbytes() const;
  void clear_n8_tbytes();
  static const int kN8TbytesFieldNumber = 8;
  const ::Codec::Tbytes& n8_tbytes() const;
  ::Codec::Tbytes* release_n8_tbytes();
  ::Codec::Tbytes* mutable_n8_tbytes();
  void set_allocated_n8_tbytes(::Codec::Tbytes* n8_tbytes);

  // int32 n2_int32 = 2;
  void clear_n2_int32();
  static const int kN2Int32FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 n2_int32() const;
  void set_n2_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 n3_uint32 = 3;
  void clear_n3_uint32();
  static const int kN3Uint32FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 n3_uint32() const;
  void set_n3_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // sint32 n4_sint32 = 4;
  void clear_n4_sint32();
  static const int kN4Sint32FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 n4_sint32() const;
  void set_n4_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // fixed32 n5_fixed32 = 5;
  void clear_n5_fixed32();
  static const int kN5Fixed32FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 n5_fixed32() const;
  void set_n5_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float n6_float = 6;
  void clear_n6_float();
  static const int kN6FloatFieldNumber = 6;
  float n6_float() const;
  void set_n6_float(float value);

  // int32 n9_int32 = 9;
  void clear_n9_int32();
  static const int kN9Int32FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 n9_int32() const;
  void set_n9_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n1_int32 = 3000;
  void clear_n1_int32();
  static const int kN1Int32FieldNumber = 3000;
  ::PROTOBUF_NAMESPACE_ID::int32 n1_int32() const;
  void set_n1_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Codec.THasitem)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n7_bytes_;
  ::Codec::Tbytes* n8_tbytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 n2_int32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n3_uint32_;
  ::PROTOBUF_NAMESPACE_ID::int32 n4_sint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n5_fixed32_;
  float n6_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 n9_int32_;
  ::PROTOBUF_NAMESPACE_ID::int32 n1_int32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Codec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tint32

// int32 n1 = 1;
inline void Tint32::clear_n1() {
  n1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tint32::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tint32.n1)
  return n1_;
}
inline void Tint32::set_n1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tint32.n1)
}

// -------------------------------------------------------------------

// Tint64

// int64 n1 = 1;
inline void Tint64::clear_n1() {
  n1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tint64::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tint64.n1)
  return n1_;
}
inline void Tint64::set_n1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tint64.n1)
}

// -------------------------------------------------------------------

// Tuint32

// uint32 n1 = 1;
inline void Tuint32::clear_n1() {
  n1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tuint32::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tuint32.n1)
  return n1_;
}
inline void Tuint32::set_n1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tuint32.n1)
}

// -------------------------------------------------------------------

// Tuint64

// uint64 n1 = 1;
inline void Tuint64::clear_n1() {
  n1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tuint64::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tuint64.n1)
  return n1_;
}
inline void Tuint64::set_n1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tuint64.n1)
}

// -------------------------------------------------------------------

// Tsint32

// sint32 n1 = 1;
inline void Tsint32::clear_n1() {
  n1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsint32::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tsint32.n1)
  return n1_;
}
inline void Tsint32::set_n1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tsint32.n1)
}

// -------------------------------------------------------------------

// Tsint64

// sint64 n1 = 1;
inline void Tsint64::clear_n1() {
  n1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tsint64::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tsint64.n1)
  return n1_;
}
inline void Tsint64::set_n1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tsint64.n1)
}

// -------------------------------------------------------------------

// Tbool

// bool n1 = 1;
inline void Tbool::clear_n1() {
  n1_ = false;
}
inline bool Tbool::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tbool.n1)
  return n1_;
}
inline void Tbool::set_n1(bool value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tbool.n1)
}

// -------------------------------------------------------------------

// Tenum

// .Codec.PhoneType n1 = 1;
inline void Tenum::clear_n1() {
  n1_ = 0;
}
inline ::Codec::PhoneType Tenum::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tenum.n1)
  return static_cast< ::Codec::PhoneType >(n1_);
}
inline void Tenum::set_n1(::Codec::PhoneType value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tenum.n1)
}

// -------------------------------------------------------------------

// Tfixed64

// fixed64 n1 = 1;
inline void Tfixed64::clear_n1() {
  n1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tfixed64::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tfixed64.n1)
  return n1_;
}
inline void Tfixed64::set_n1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tfixed64.n1)
}

// -------------------------------------------------------------------

// Tsfixed64

// sfixed64 n1 = 1;
inline void Tsfixed64::clear_n1() {
  n1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tsfixed64::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tsfixed64.n1)
  return n1_;
}
inline void Tsfixed64::set_n1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tsfixed64.n1)
}

// -------------------------------------------------------------------

// Tdouble

// double n1 = 1;
inline void Tdouble::clear_n1() {
  n1_ = 0;
}
inline double Tdouble::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tdouble.n1)
  return n1_;
}
inline void Tdouble::set_n1(double value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tdouble.n1)
}

// -------------------------------------------------------------------

// Tstring

// string n1 = 1;
inline void Tstring::clear_n1() {
  n1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tstring::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tstring.n1)
  return n1_.GetNoArena();
}
inline void Tstring::set_n1(const std::string& value) {
  
  n1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Codec.Tstring.n1)
}
inline void Tstring::set_n1(std::string&& value) {
  
  n1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Codec.Tstring.n1)
}
inline void Tstring::set_n1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Codec.Tstring.n1)
}
inline void Tstring::set_n1(const char* value, size_t size) {
  
  n1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Codec.Tstring.n1)
}
inline std::string* Tstring::mutable_n1() {
  
  // @@protoc_insertion_point(field_mutable:Codec.Tstring.n1)
  return n1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tstring::release_n1() {
  // @@protoc_insertion_point(field_release:Codec.Tstring.n1)
  
  return n1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tstring::set_allocated_n1(std::string* n1) {
  if (n1 != nullptr) {
    
  } else {
    
  }
  n1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n1);
  // @@protoc_insertion_point(field_set_allocated:Codec.Tstring.n1)
}

// -------------------------------------------------------------------

// Tbytes

// bytes n1 = 1;
inline void Tbytes::clear_n1() {
  n1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tbytes::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tbytes.n1)
  return n1_.GetNoArena();
}
inline void Tbytes::set_n1(const std::string& value) {
  
  n1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Codec.Tbytes.n1)
}
inline void Tbytes::set_n1(std::string&& value) {
  
  n1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Codec.Tbytes.n1)
}
inline void Tbytes::set_n1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Codec.Tbytes.n1)
}
inline void Tbytes::set_n1(const void* value, size_t size) {
  
  n1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Codec.Tbytes.n1)
}
inline std::string* Tbytes::mutable_n1() {
  
  // @@protoc_insertion_point(field_mutable:Codec.Tbytes.n1)
  return n1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tbytes::release_n1() {
  // @@protoc_insertion_point(field_release:Codec.Tbytes.n1)
  
  return n1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tbytes::set_allocated_n1(std::string* n1) {
  if (n1 != nullptr) {
    
  } else {
    
  }
  n1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n1);
  // @@protoc_insertion_point(field_set_allocated:Codec.Tbytes.n1)
}

// -------------------------------------------------------------------

// Tembeddedmessages_TMsg

// int32 n1 = 1;
inline void Tembeddedmessages_TMsg::clear_n1() {
  n1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tembeddedmessages_TMsg::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tembeddedmessages.TMsg.n1)
  return n1_;
}
inline void Tembeddedmessages_TMsg::set_n1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tembeddedmessages.TMsg.n1)
}

// -------------------------------------------------------------------

// Tembeddedmessages

// .Codec.Tembeddedmessages.TMsg n1 = 1;
inline bool Tembeddedmessages::has_n1() const {
  return this != internal_default_instance() && n1_ != nullptr;
}
inline void Tembeddedmessages::clear_n1() {
  if (GetArenaNoVirtual() == nullptr && n1_ != nullptr) {
    delete n1_;
  }
  n1_ = nullptr;
}
inline const ::Codec::Tembeddedmessages_TMsg& Tembeddedmessages::n1() const {
  const ::Codec::Tembeddedmessages_TMsg* p = n1_;
  // @@protoc_insertion_point(field_get:Codec.Tembeddedmessages.n1)
  return p != nullptr ? *p : *reinterpret_cast<const ::Codec::Tembeddedmessages_TMsg*>(
      &::Codec::_Tembeddedmessages_TMsg_default_instance_);
}
inline ::Codec::Tembeddedmessages_TMsg* Tembeddedmessages::release_n1() {
  // @@protoc_insertion_point(field_release:Codec.Tembeddedmessages.n1)
  
  ::Codec::Tembeddedmessages_TMsg* temp = n1_;
  n1_ = nullptr;
  return temp;
}
inline ::Codec::Tembeddedmessages_TMsg* Tembeddedmessages::mutable_n1() {
  
  if (n1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Codec::Tembeddedmessages_TMsg>(GetArenaNoVirtual());
    n1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Codec.Tembeddedmessages.n1)
  return n1_;
}
inline void Tembeddedmessages::set_allocated_n1(::Codec::Tembeddedmessages_TMsg* n1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete n1_;
  }
  if (n1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      n1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n1, submessage_arena);
    }
    
  } else {
    
  }
  n1_ = n1;
  // @@protoc_insertion_point(field_set_allocated:Codec.Tembeddedmessages.n1)
}

// -------------------------------------------------------------------

// TRepeatedfields

// repeated int32 n1 = 1;
inline int TRepeatedfields::n1_size() const {
  return n1_.size();
}
inline void TRepeatedfields::clear_n1() {
  n1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TRepeatedfields::n1(int index) const {
  // @@protoc_insertion_point(field_get:Codec.TRepeatedfields.n1)
  return n1_.Get(index);
}
inline void TRepeatedfields::set_n1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  n1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Codec.TRepeatedfields.n1)
}
inline void TRepeatedfields::add_n1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  n1_.Add(value);
  // @@protoc_insertion_point(field_add:Codec.TRepeatedfields.n1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TRepeatedfields::n1() const {
  // @@protoc_insertion_point(field_list:Codec.TRepeatedfields.n1)
  return n1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TRepeatedfields::mutable_n1() {
  // @@protoc_insertion_point(field_mutable_list:Codec.TRepeatedfields.n1)
  return &n1_;
}

// repeated .Codec.Tbytes n2 = 2;
inline int TRepeatedfields::n2_size() const {
  return n2_.size();
}
inline void TRepeatedfields::clear_n2() {
  n2_.Clear();
}
inline ::Codec::Tbytes* TRepeatedfields::mutable_n2(int index) {
  // @@protoc_insertion_point(field_mutable:Codec.TRepeatedfields.n2)
  return n2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Codec::Tbytes >*
TRepeatedfields::mutable_n2() {
  // @@protoc_insertion_point(field_mutable_list:Codec.TRepeatedfields.n2)
  return &n2_;
}
inline const ::Codec::Tbytes& TRepeatedfields::n2(int index) const {
  // @@protoc_insertion_point(field_get:Codec.TRepeatedfields.n2)
  return n2_.Get(index);
}
inline ::Codec::Tbytes* TRepeatedfields::add_n2() {
  // @@protoc_insertion_point(field_add:Codec.TRepeatedfields.n2)
  return n2_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Codec::Tbytes >&
TRepeatedfields::n2() const {
  // @@protoc_insertion_point(field_list:Codec.TRepeatedfields.n2)
  return n2_;
}

// -------------------------------------------------------------------

// Tfixed32

// fixed32 n1 = 1;
inline void Tfixed32::clear_n1() {
  n1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tfixed32::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tfixed32.n1)
  return n1_;
}
inline void Tfixed32::set_n1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tfixed32.n1)
}

// -------------------------------------------------------------------

// Tsfixed32

// sfixed32 n1 = 1;
inline void Tsfixed32::clear_n1() {
  n1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsfixed32::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tsfixed32.n1)
  return n1_;
}
inline void Tsfixed32::set_n1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tsfixed32.n1)
}

// -------------------------------------------------------------------

// Tfloat

// float n1 = 1;
inline void Tfloat::clear_n1() {
  n1_ = 0;
}
inline float Tfloat::n1() const {
  // @@protoc_insertion_point(field_get:Codec.Tfloat.n1)
  return n1_;
}
inline void Tfloat::set_n1(float value) {
  
  n1_ = value;
  // @@protoc_insertion_point(field_set:Codec.Tfloat.n1)
}

// -------------------------------------------------------------------

// THasitem

// int32 n1_int32 = 3000;
inline void THasitem::clear_n1_int32() {
  n1_int32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THasitem::n1_int32() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n1_int32)
  return n1_int32_;
}
inline void THasitem::set_n1_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n1_int32_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n1_int32)
}

// int32 n2_int32 = 2;
inline void THasitem::clear_n2_int32() {
  n2_int32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THasitem::n2_int32() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n2_int32)
  return n2_int32_;
}
inline void THasitem::set_n2_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n2_int32_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n2_int32)
}

// uint32 n3_uint32 = 3;
inline void THasitem::clear_n3_uint32() {
  n3_uint32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 THasitem::n3_uint32() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n3_uint32)
  return n3_uint32_;
}
inline void THasitem::set_n3_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n3_uint32_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n3_uint32)
}

// sint32 n4_sint32 = 4;
inline void THasitem::clear_n4_sint32() {
  n4_sint32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THasitem::n4_sint32() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n4_sint32)
  return n4_sint32_;
}
inline void THasitem::set_n4_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n4_sint32_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n4_sint32)
}

// fixed32 n5_fixed32 = 5;
inline void THasitem::clear_n5_fixed32() {
  n5_fixed32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 THasitem::n5_fixed32() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n5_fixed32)
  return n5_fixed32_;
}
inline void THasitem::set_n5_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n5_fixed32_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n5_fixed32)
}

// float n6_float = 6;
inline void THasitem::clear_n6_float() {
  n6_float_ = 0;
}
inline float THasitem::n6_float() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n6_float)
  return n6_float_;
}
inline void THasitem::set_n6_float(float value) {
  
  n6_float_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n6_float)
}

// bytes n7_bytes = 7;
inline void THasitem::clear_n7_bytes() {
  n7_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& THasitem::n7_bytes() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n7_bytes)
  return n7_bytes_.GetNoArena();
}
inline void THasitem::set_n7_bytes(const std::string& value) {
  
  n7_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Codec.THasitem.n7_bytes)
}
inline void THasitem::set_n7_bytes(std::string&& value) {
  
  n7_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Codec.THasitem.n7_bytes)
}
inline void THasitem::set_n7_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n7_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Codec.THasitem.n7_bytes)
}
inline void THasitem::set_n7_bytes(const void* value, size_t size) {
  
  n7_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Codec.THasitem.n7_bytes)
}
inline std::string* THasitem::mutable_n7_bytes() {
  
  // @@protoc_insertion_point(field_mutable:Codec.THasitem.n7_bytes)
  return n7_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* THasitem::release_n7_bytes() {
  // @@protoc_insertion_point(field_release:Codec.THasitem.n7_bytes)
  
  return n7_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void THasitem::set_allocated_n7_bytes(std::string* n7_bytes) {
  if (n7_bytes != nullptr) {
    
  } else {
    
  }
  n7_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n7_bytes);
  // @@protoc_insertion_point(field_set_allocated:Codec.THasitem.n7_bytes)
}

// .Codec.Tbytes n8_Tbytes = 8;
inline bool THasitem::has_n8_tbytes() const {
  return this != internal_default_instance() && n8_tbytes_ != nullptr;
}
inline void THasitem::clear_n8_tbytes() {
  if (GetArenaNoVirtual() == nullptr && n8_tbytes_ != nullptr) {
    delete n8_tbytes_;
  }
  n8_tbytes_ = nullptr;
}
inline const ::Codec::Tbytes& THasitem::n8_tbytes() const {
  const ::Codec::Tbytes* p = n8_tbytes_;
  // @@protoc_insertion_point(field_get:Codec.THasitem.n8_Tbytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::Codec::Tbytes*>(
      &::Codec::_Tbytes_default_instance_);
}
inline ::Codec::Tbytes* THasitem::release_n8_tbytes() {
  // @@protoc_insertion_point(field_release:Codec.THasitem.n8_Tbytes)
  
  ::Codec::Tbytes* temp = n8_tbytes_;
  n8_tbytes_ = nullptr;
  return temp;
}
inline ::Codec::Tbytes* THasitem::mutable_n8_tbytes() {
  
  if (n8_tbytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Codec::Tbytes>(GetArenaNoVirtual());
    n8_tbytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Codec.THasitem.n8_Tbytes)
  return n8_tbytes_;
}
inline void THasitem::set_allocated_n8_tbytes(::Codec::Tbytes* n8_tbytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete n8_tbytes_;
  }
  if (n8_tbytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      n8_tbytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n8_tbytes, submessage_arena);
    }
    
  } else {
    
  }
  n8_tbytes_ = n8_tbytes;
  // @@protoc_insertion_point(field_set_allocated:Codec.THasitem.n8_Tbytes)
}

// int32 n9_int32 = 9;
inline void THasitem::clear_n9_int32() {
  n9_int32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THasitem::n9_int32() const {
  // @@protoc_insertion_point(field_get:Codec.THasitem.n9_int32)
  return n9_int32_;
}
inline void THasitem::set_n9_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n9_int32_ = value;
  // @@protoc_insertion_point(field_set:Codec.THasitem.n9_int32)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Codec

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Codec::PhoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Codec::PhoneType>() {
  return ::Codec::PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Codec_2eproto
