// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Codec.proto

#include "Codec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Codec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tbytes_Codec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Codec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tembeddedmessages_TMsg_Codec_2eproto;
namespace Codec {
class Tint32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tint32> _instance;
} _Tint32_default_instance_;
class Tint64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tint64> _instance;
} _Tint64_default_instance_;
class Tuint32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tuint32> _instance;
} _Tuint32_default_instance_;
class Tuint64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tuint64> _instance;
} _Tuint64_default_instance_;
class Tsint32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsint32> _instance;
} _Tsint32_default_instance_;
class Tsint64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsint64> _instance;
} _Tsint64_default_instance_;
class TboolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tbool> _instance;
} _Tbool_default_instance_;
class TenumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tenum> _instance;
} _Tenum_default_instance_;
class Tfixed64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tfixed64> _instance;
} _Tfixed64_default_instance_;
class Tsfixed64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsfixed64> _instance;
} _Tsfixed64_default_instance_;
class TdoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tdouble> _instance;
} _Tdouble_default_instance_;
class TstringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tstring> _instance;
} _Tstring_default_instance_;
class TbytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tbytes> _instance;
} _Tbytes_default_instance_;
class Tembeddedmessages_TMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tembeddedmessages_TMsg> _instance;
} _Tembeddedmessages_TMsg_default_instance_;
class TembeddedmessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tembeddedmessages> _instance;
} _Tembeddedmessages_default_instance_;
class TRepeatedfieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TRepeatedfields> _instance;
} _TRepeatedfields_default_instance_;
class Tfixed32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tfixed32> _instance;
} _Tfixed32_default_instance_;
class Tsfixed32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsfixed32> _instance;
} _Tsfixed32_default_instance_;
class TfloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tfloat> _instance;
} _Tfloat_default_instance_;
class THasitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<THasitem> _instance;
} _THasitem_default_instance_;
}  // namespace Codec
static void InitDefaultsscc_info_THasitem_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_THasitem_default_instance_;
    new (ptr) ::Codec::THasitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::THasitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_THasitem_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_THasitem_Codec_2eproto}, {
      &scc_info_Tbytes_Codec_2eproto.base,}};

static void InitDefaultsscc_info_TRepeatedfields_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_TRepeatedfields_default_instance_;
    new (ptr) ::Codec::TRepeatedfields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::TRepeatedfields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TRepeatedfields_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TRepeatedfields_Codec_2eproto}, {
      &scc_info_Tbytes_Codec_2eproto.base,}};

static void InitDefaultsscc_info_Tbool_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tbool_default_instance_;
    new (ptr) ::Codec::Tbool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tbool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tbool_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tbool_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tbytes_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tbytes_default_instance_;
    new (ptr) ::Codec::Tbytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tbytes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tbytes_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tbytes_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tdouble_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tdouble_default_instance_;
    new (ptr) ::Codec::Tdouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tdouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tdouble_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tdouble_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tembeddedmessages_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tembeddedmessages_default_instance_;
    new (ptr) ::Codec::Tembeddedmessages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tembeddedmessages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tembeddedmessages_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Tembeddedmessages_Codec_2eproto}, {
      &scc_info_Tembeddedmessages_TMsg_Codec_2eproto.base,}};

static void InitDefaultsscc_info_Tembeddedmessages_TMsg_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tembeddedmessages_TMsg_default_instance_;
    new (ptr) ::Codec::Tembeddedmessages_TMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tembeddedmessages_TMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tembeddedmessages_TMsg_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tembeddedmessages_TMsg_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tenum_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tenum_default_instance_;
    new (ptr) ::Codec::Tenum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tenum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tenum_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tenum_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tfixed32_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tfixed32_default_instance_;
    new (ptr) ::Codec::Tfixed32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tfixed32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tfixed32_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tfixed32_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tfixed64_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tfixed64_default_instance_;
    new (ptr) ::Codec::Tfixed64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tfixed64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tfixed64_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tfixed64_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tfloat_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tfloat_default_instance_;
    new (ptr) ::Codec::Tfloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tfloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tfloat_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tfloat_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tint32_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tint32_default_instance_;
    new (ptr) ::Codec::Tint32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tint32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tint32_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tint32_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tint64_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tint64_default_instance_;
    new (ptr) ::Codec::Tint64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tint64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tint64_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tint64_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tsfixed32_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tsfixed32_default_instance_;
    new (ptr) ::Codec::Tsfixed32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tsfixed32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tsfixed32_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tsfixed32_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tsfixed64_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tsfixed64_default_instance_;
    new (ptr) ::Codec::Tsfixed64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tsfixed64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tsfixed64_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tsfixed64_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tsint32_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tsint32_default_instance_;
    new (ptr) ::Codec::Tsint32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tsint32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tsint32_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tsint32_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tsint64_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tsint64_default_instance_;
    new (ptr) ::Codec::Tsint64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tsint64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tsint64_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tsint64_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tstring_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tstring_default_instance_;
    new (ptr) ::Codec::Tstring();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tstring::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tstring_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tstring_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tuint32_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tuint32_default_instance_;
    new (ptr) ::Codec::Tuint32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tuint32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tuint32_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tuint32_Codec_2eproto}, {}};

static void InitDefaultsscc_info_Tuint64_Codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Codec::_Tuint64_default_instance_;
    new (ptr) ::Codec::Tuint64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Codec::Tuint64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tuint64_Codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Tuint64_Codec_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Codec_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Codec_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Codec_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Codec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tint32, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tint64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tint64, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tuint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tuint32, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tuint64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tuint64, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsint32, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsint64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsint64, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tbool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tbool, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tenum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tenum, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tfixed64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tfixed64, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsfixed64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsfixed64, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tdouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tdouble, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tstring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tstring, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tbytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tbytes, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tembeddedmessages_TMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tembeddedmessages_TMsg, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tembeddedmessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tembeddedmessages, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::TRepeatedfields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::TRepeatedfields, n1_),
  PROTOBUF_FIELD_OFFSET(::Codec::TRepeatedfields, n2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tfixed32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tfixed32, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsfixed32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tsfixed32, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::Tfloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::Tfloat, n1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n1_int32_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n2_int32_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n3_uint32_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n4_sint32_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n5_fixed32_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n6_float_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n7_bytes_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n8_tbytes_),
  PROTOBUF_FIELD_OFFSET(::Codec::THasitem, n9_int32_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Codec::Tint32)},
  { 6, -1, sizeof(::Codec::Tint64)},
  { 12, -1, sizeof(::Codec::Tuint32)},
  { 18, -1, sizeof(::Codec::Tuint64)},
  { 24, -1, sizeof(::Codec::Tsint32)},
  { 30, -1, sizeof(::Codec::Tsint64)},
  { 36, -1, sizeof(::Codec::Tbool)},
  { 42, -1, sizeof(::Codec::Tenum)},
  { 48, -1, sizeof(::Codec::Tfixed64)},
  { 54, -1, sizeof(::Codec::Tsfixed64)},
  { 60, -1, sizeof(::Codec::Tdouble)},
  { 66, -1, sizeof(::Codec::Tstring)},
  { 72, -1, sizeof(::Codec::Tbytes)},
  { 78, -1, sizeof(::Codec::Tembeddedmessages_TMsg)},
  { 84, -1, sizeof(::Codec::Tembeddedmessages)},
  { 90, -1, sizeof(::Codec::TRepeatedfields)},
  { 97, -1, sizeof(::Codec::Tfixed32)},
  { 103, -1, sizeof(::Codec::Tsfixed32)},
  { 109, -1, sizeof(::Codec::Tfloat)},
  { 115, -1, sizeof(::Codec::THasitem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tint32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tint64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tuint32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tuint64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tsint32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tsint64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tbool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tenum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tfixed64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tsfixed64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tdouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tstring_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tbytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tembeddedmessages_TMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tembeddedmessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_TRepeatedfields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tfixed32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tsfixed32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_Tfloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Codec::_THasitem_default_instance_),
};

const char descriptor_table_protodef_Codec_2eproto[] =
  "\n\013Codec.proto\022\005Codec\"\024\n\006Tint32\022\n\n\002n1\030\001 \001"
  "(\005\"\024\n\006Tint64\022\n\n\002n1\030\001 \001(\003\"\025\n\007Tuint32\022\n\n\002n"
  "1\030\001 \001(\r\"\025\n\007Tuint64\022\n\n\002n1\030\001 \001(\004\"\025\n\007Tsint3"
  "2\022\n\n\002n1\030\001 \001(\021\"\025\n\007Tsint64\022\n\n\002n1\030\001 \001(\022\"\023\n\005"
  "Tbool\022\n\n\002n1\030\001 \001(\010\"%\n\005Tenum\022\034\n\002n1\030\001 \001(\0162\020"
  ".Codec.PhoneType\"\026\n\010Tfixed64\022\n\n\002n1\030\001 \001(\006"
  "\"\027\n\tTsfixed64\022\n\n\002n1\030\001 \001(\020\"\025\n\007Tdouble\022\n\n\002"
  "n1\030\001 \001(\001\"\025\n\007Tstring\022\n\n\002n1\030\001 \001(\t\"\024\n\006Tbyte"
  "s\022\n\n\002n1\030\001 \001(\014\"R\n\021Tembeddedmessages\022)\n\002n1"
  "\030\001 \001(\0132\035.Codec.Tembeddedmessages.TMsg\032\022\n"
  "\004TMsg\022\n\n\002n1\030\001 \001(\005\"8\n\017TRepeatedfields\022\n\n\002"
  "n1\030\001 \003(\005\022\031\n\002n2\030\002 \003(\0132\r.Codec.Tbytes\"\026\n\010T"
  "fixed32\022\n\n\002n1\030\001 \001(\007\"\027\n\tTsfixed32\022\n\n\002n1\030\001"
  " \001(\017\"\024\n\006Tfloat\022\n\n\002n1\030\001 \001(\002\"\301\001\n\010THasitem\022"
  "\021\n\010n1_int32\030\270\027 \001(\005\022\020\n\010n2_int32\030\002 \001(\005\022\021\n\t"
  "n3_uint32\030\003 \001(\r\022\021\n\tn4_sint32\030\004 \001(\021\022\022\n\nn5"
  "_fixed32\030\005 \001(\007\022\020\n\010n6_float\030\006 \001(\002\022\020\n\010n7_b"
  "ytes\030\007 \001(\014\022 \n\tn8_Tbytes\030\010 \001(\0132\r.Codec.Tb"
  "ytes\022\020\n\010n9_int32\030\t \001(\005*>\n\tPhoneType\022\021\n\rP"
  "HONE_DEFAULT\020\000\022\016\n\nPHONE_HOME\020\001\022\016\n\nPHONE_"
  "WORK\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Codec_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Codec_2eproto_sccs[20] = {
  &scc_info_THasitem_Codec_2eproto.base,
  &scc_info_TRepeatedfields_Codec_2eproto.base,
  &scc_info_Tbool_Codec_2eproto.base,
  &scc_info_Tbytes_Codec_2eproto.base,
  &scc_info_Tdouble_Codec_2eproto.base,
  &scc_info_Tembeddedmessages_Codec_2eproto.base,
  &scc_info_Tembeddedmessages_TMsg_Codec_2eproto.base,
  &scc_info_Tenum_Codec_2eproto.base,
  &scc_info_Tfixed32_Codec_2eproto.base,
  &scc_info_Tfixed64_Codec_2eproto.base,
  &scc_info_Tfloat_Codec_2eproto.base,
  &scc_info_Tint32_Codec_2eproto.base,
  &scc_info_Tint64_Codec_2eproto.base,
  &scc_info_Tsfixed32_Codec_2eproto.base,
  &scc_info_Tsfixed64_Codec_2eproto.base,
  &scc_info_Tsint32_Codec_2eproto.base,
  &scc_info_Tsint64_Codec_2eproto.base,
  &scc_info_Tstring_Codec_2eproto.base,
  &scc_info_Tuint32_Codec_2eproto.base,
  &scc_info_Tuint64_Codec_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Codec_2eproto_once;
static bool descriptor_table_Codec_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Codec_2eproto = {
  &descriptor_table_Codec_2eproto_initialized, descriptor_table_protodef_Codec_2eproto, "Codec.proto", 814,
  &descriptor_table_Codec_2eproto_once, descriptor_table_Codec_2eproto_sccs, descriptor_table_Codec_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_Codec_2eproto::offsets,
  file_level_metadata_Codec_2eproto, 20, file_level_enum_descriptors_Codec_2eproto, file_level_service_descriptors_Codec_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Codec_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Codec_2eproto), true);
namespace Codec {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Codec_2eproto);
  return file_level_enum_descriptors_Codec_2eproto[0];
}
bool PhoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Tint32::InitAsDefaultInstance() {
}
class Tint32::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tint32::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tint32::Tint32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tint32)
}
Tint32::Tint32(const Tint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tint32)
}

void Tint32::SharedCtor() {
  n1_ = 0;
}

Tint32::~Tint32() {
  // @@protoc_insertion_point(destructor:Codec.Tint32)
  SharedDtor();
}

void Tint32::SharedDtor() {
}

void Tint32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tint32& Tint32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tint32_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tint32::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tint32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tint32::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tint32)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tint32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tint32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tint32::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tint32)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tint32::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tint32)
  return target;
}

size_t Tint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tint32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tint32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tint32)
  GOOGLE_DCHECK_NE(&from, this);
  const Tint32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tint32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tint32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tint32)
    MergeFrom(*source);
  }
}

void Tint32::MergeFrom(const Tint32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tint32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tint32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tint32::CopyFrom(const Tint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tint32::IsInitialized() const {
  return true;
}

void Tint32::Swap(Tint32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tint32::InternalSwap(Tint32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tint32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tint64::InitAsDefaultInstance() {
}
class Tint64::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tint64::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tint64::Tint64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tint64)
}
Tint64::Tint64(const Tint64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tint64)
}

void Tint64::SharedCtor() {
  n1_ = PROTOBUF_LONGLONG(0);
}

Tint64::~Tint64() {
  // @@protoc_insertion_point(destructor:Codec.Tint64)
  SharedDtor();
}

void Tint64::SharedDtor() {
}

void Tint64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tint64& Tint64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tint64_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tint64::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tint64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tint64::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tint64)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tint64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tint64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tint64::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tint64)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tint64::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tint64)
  return target;
}

size_t Tint64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tint64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tint64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tint64)
  GOOGLE_DCHECK_NE(&from, this);
  const Tint64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tint64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tint64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tint64)
    MergeFrom(*source);
  }
}

void Tint64::MergeFrom(const Tint64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tint64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tint64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tint64::CopyFrom(const Tint64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tint64::IsInitialized() const {
  return true;
}

void Tint64::Swap(Tint64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tint64::InternalSwap(Tint64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tint64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tuint32::InitAsDefaultInstance() {
}
class Tuint32::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tuint32::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tuint32::Tuint32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tuint32)
}
Tuint32::Tuint32(const Tuint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tuint32)
}

void Tuint32::SharedCtor() {
  n1_ = 0u;
}

Tuint32::~Tuint32() {
  // @@protoc_insertion_point(destructor:Codec.Tuint32)
  SharedDtor();
}

void Tuint32::SharedDtor() {
}

void Tuint32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tuint32& Tuint32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tuint32_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tuint32::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tuint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tuint32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tuint32::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tuint32)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tuint32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tuint32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tuint32::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tuint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tuint32)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tuint32::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tuint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tuint32)
  return target;
}

size_t Tuint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tuint32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tuint32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tuint32)
  GOOGLE_DCHECK_NE(&from, this);
  const Tuint32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tuint32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tuint32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tuint32)
    MergeFrom(*source);
  }
}

void Tuint32::MergeFrom(const Tuint32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tuint32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tuint32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tuint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuint32::CopyFrom(const Tuint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tuint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuint32::IsInitialized() const {
  return true;
}

void Tuint32::Swap(Tuint32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tuint32::InternalSwap(Tuint32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tuint32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tuint64::InitAsDefaultInstance() {
}
class Tuint64::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tuint64::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tuint64::Tuint64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tuint64)
}
Tuint64::Tuint64(const Tuint64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tuint64)
}

void Tuint64::SharedCtor() {
  n1_ = PROTOBUF_ULONGLONG(0);
}

Tuint64::~Tuint64() {
  // @@protoc_insertion_point(destructor:Codec.Tuint64)
  SharedDtor();
}

void Tuint64::SharedDtor() {
}

void Tuint64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tuint64& Tuint64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tuint64_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tuint64::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tuint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tuint64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tuint64::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tuint64)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tuint64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tuint64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tuint64::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tuint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tuint64)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tuint64::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tuint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tuint64)
  return target;
}

size_t Tuint64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tuint64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tuint64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tuint64)
  GOOGLE_DCHECK_NE(&from, this);
  const Tuint64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tuint64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tuint64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tuint64)
    MergeFrom(*source);
  }
}

void Tuint64::MergeFrom(const Tuint64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tuint64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tuint64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tuint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuint64::CopyFrom(const Tuint64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tuint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuint64::IsInitialized() const {
  return true;
}

void Tuint64::Swap(Tuint64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tuint64::InternalSwap(Tuint64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tuint64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tsint32::InitAsDefaultInstance() {
}
class Tsint32::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsint32::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsint32::Tsint32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tsint32)
}
Tsint32::Tsint32(const Tsint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tsint32)
}

void Tsint32::SharedCtor() {
  n1_ = 0;
}

Tsint32::~Tsint32() {
  // @@protoc_insertion_point(destructor:Codec.Tsint32)
  SharedDtor();
}

void Tsint32::SharedDtor() {
}

void Tsint32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsint32& Tsint32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsint32_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tsint32::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tsint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tsint32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tsint32::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tsint32)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tsint32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tsint32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tsint32::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tsint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tsint32)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsint32::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tsint32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tsint32)
  return target;
}

size_t Tsint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tsint32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsint32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tsint32)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsint32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsint32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tsint32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tsint32)
    MergeFrom(*source);
  }
}

void Tsint32::MergeFrom(const Tsint32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tsint32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tsint32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tsint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsint32::CopyFrom(const Tsint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tsint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsint32::IsInitialized() const {
  return true;
}

void Tsint32::Swap(Tsint32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsint32::InternalSwap(Tsint32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsint32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tsint64::InitAsDefaultInstance() {
}
class Tsint64::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsint64::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsint64::Tsint64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tsint64)
}
Tsint64::Tsint64(const Tsint64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tsint64)
}

void Tsint64::SharedCtor() {
  n1_ = PROTOBUF_LONGLONG(0);
}

Tsint64::~Tsint64() {
  // @@protoc_insertion_point(destructor:Codec.Tsint64)
  SharedDtor();
}

void Tsint64::SharedDtor() {
}

void Tsint64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsint64& Tsint64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsint64_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tsint64::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tsint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tsint64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tsint64::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tsint64)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint64 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tsint64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tsint64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tsint64::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tsint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tsint64)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsint64::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tsint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tsint64)
  return target;
}

size_t Tsint64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tsint64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsint64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tsint64)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsint64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsint64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tsint64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tsint64)
    MergeFrom(*source);
  }
}

void Tsint64::MergeFrom(const Tsint64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tsint64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tsint64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tsint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsint64::CopyFrom(const Tsint64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tsint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsint64::IsInitialized() const {
  return true;
}

void Tsint64::Swap(Tsint64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsint64::InternalSwap(Tsint64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsint64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tbool::InitAsDefaultInstance() {
}
class Tbool::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tbool::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tbool::Tbool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tbool)
}
Tbool::Tbool(const Tbool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tbool)
}

void Tbool::SharedCtor() {
  n1_ = false;
}

Tbool::~Tbool() {
  // @@protoc_insertion_point(destructor:Codec.Tbool)
  SharedDtor();
}

void Tbool::SharedDtor() {
}

void Tbool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tbool& Tbool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tbool_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tbool::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tbool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tbool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tbool::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tbool)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tbool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tbool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tbool::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tbool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tbool)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tbool::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tbool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tbool)
  return target;
}

size_t Tbool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tbool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tbool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tbool)
  GOOGLE_DCHECK_NE(&from, this);
  const Tbool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tbool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tbool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tbool)
    MergeFrom(*source);
  }
}

void Tbool::MergeFrom(const Tbool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tbool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tbool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tbool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tbool::CopyFrom(const Tbool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tbool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbool::IsInitialized() const {
  return true;
}

void Tbool::Swap(Tbool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tbool::InternalSwap(Tbool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tbool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tenum::InitAsDefaultInstance() {
}
class Tenum::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tenum::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tenum::Tenum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tenum)
}
Tenum::Tenum(const Tenum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tenum)
}

void Tenum::SharedCtor() {
  n1_ = 0;
}

Tenum::~Tenum() {
  // @@protoc_insertion_point(destructor:Codec.Tenum)
  SharedDtor();
}

void Tenum::SharedDtor() {
}

void Tenum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tenum& Tenum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tenum_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tenum::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tenum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tenum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Codec.PhoneType n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_n1(static_cast<::Codec::PhoneType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tenum::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tenum)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Codec.PhoneType n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_n1(static_cast< ::Codec::PhoneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tenum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tenum)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tenum::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tenum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Codec.PhoneType n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tenum)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tenum::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tenum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Codec.PhoneType n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tenum)
  return target;
}

size_t Tenum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tenum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Codec.PhoneType n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tenum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tenum)
  GOOGLE_DCHECK_NE(&from, this);
  const Tenum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tenum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tenum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tenum)
    MergeFrom(*source);
  }
}

void Tenum::MergeFrom(const Tenum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tenum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tenum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tenum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tenum::CopyFrom(const Tenum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tenum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tenum::IsInitialized() const {
  return true;
}

void Tenum::Swap(Tenum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tenum::InternalSwap(Tenum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tenum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tfixed64::InitAsDefaultInstance() {
}
class Tfixed64::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tfixed64::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tfixed64::Tfixed64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tfixed64)
}
Tfixed64::Tfixed64(const Tfixed64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tfixed64)
}

void Tfixed64::SharedCtor() {
  n1_ = PROTOBUF_ULONGLONG(0);
}

Tfixed64::~Tfixed64() {
  // @@protoc_insertion_point(destructor:Codec.Tfixed64)
  SharedDtor();
}

void Tfixed64::SharedDtor() {
}

void Tfixed64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tfixed64& Tfixed64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tfixed64_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tfixed64::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tfixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tfixed64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tfixed64::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tfixed64)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tfixed64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tfixed64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tfixed64::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tfixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tfixed64)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tfixed64::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tfixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tfixed64)
  return target;
}

size_t Tfixed64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tfixed64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tfixed64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tfixed64)
  GOOGLE_DCHECK_NE(&from, this);
  const Tfixed64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tfixed64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tfixed64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tfixed64)
    MergeFrom(*source);
  }
}

void Tfixed64::MergeFrom(const Tfixed64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tfixed64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tfixed64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tfixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tfixed64::CopyFrom(const Tfixed64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tfixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tfixed64::IsInitialized() const {
  return true;
}

void Tfixed64::Swap(Tfixed64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tfixed64::InternalSwap(Tfixed64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tfixed64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tsfixed64::InitAsDefaultInstance() {
}
class Tsfixed64::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsfixed64::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsfixed64::Tsfixed64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tsfixed64)
}
Tsfixed64::Tsfixed64(const Tsfixed64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tsfixed64)
}

void Tsfixed64::SharedCtor() {
  n1_ = PROTOBUF_LONGLONG(0);
}

Tsfixed64::~Tsfixed64() {
  // @@protoc_insertion_point(destructor:Codec.Tsfixed64)
  SharedDtor();
}

void Tsfixed64::SharedDtor() {
}

void Tsfixed64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsfixed64& Tsfixed64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsfixed64_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tsfixed64::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tsfixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tsfixed64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed64 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tsfixed64::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tsfixed64)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed64 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tsfixed64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tsfixed64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tsfixed64::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tsfixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tsfixed64)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsfixed64::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tsfixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tsfixed64)
  return target;
}

size_t Tsfixed64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tsfixed64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed64 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsfixed64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tsfixed64)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsfixed64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsfixed64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tsfixed64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tsfixed64)
    MergeFrom(*source);
  }
}

void Tsfixed64::MergeFrom(const Tsfixed64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tsfixed64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tsfixed64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tsfixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsfixed64::CopyFrom(const Tsfixed64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tsfixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsfixed64::IsInitialized() const {
  return true;
}

void Tsfixed64::Swap(Tsfixed64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsfixed64::InternalSwap(Tsfixed64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsfixed64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tdouble::InitAsDefaultInstance() {
}
class Tdouble::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tdouble::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tdouble::Tdouble()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tdouble)
}
Tdouble::Tdouble(const Tdouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tdouble)
}

void Tdouble::SharedCtor() {
  n1_ = 0;
}

Tdouble::~Tdouble() {
  // @@protoc_insertion_point(destructor:Codec.Tdouble)
  SharedDtor();
}

void Tdouble::SharedDtor() {
}

void Tdouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tdouble& Tdouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tdouble_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tdouble::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tdouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tdouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tdouble::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tdouble)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tdouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tdouble)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tdouble::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tdouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double n1 = 1;
  if (!(this->n1() <= 0 && this->n1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tdouble)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tdouble::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tdouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double n1 = 1;
  if (!(this->n1() <= 0 && this->n1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tdouble)
  return target;
}

size_t Tdouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tdouble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double n1 = 1;
  if (!(this->n1() <= 0 && this->n1() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tdouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tdouble)
  GOOGLE_DCHECK_NE(&from, this);
  const Tdouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tdouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tdouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tdouble)
    MergeFrom(*source);
  }
}

void Tdouble::MergeFrom(const Tdouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tdouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.n1() <= 0 && from.n1() >= 0)) {
    set_n1(from.n1());
  }
}

void Tdouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tdouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tdouble::CopyFrom(const Tdouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tdouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tdouble::IsInitialized() const {
  return true;
}

void Tdouble::Swap(Tdouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tdouble::InternalSwap(Tdouble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tdouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tstring::InitAsDefaultInstance() {
}
class Tstring::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tstring::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tstring::Tstring()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tstring)
}
Tstring::Tstring(const Tstring& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.n1().size() > 0) {
    n1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.n1_);
  }
  // @@protoc_insertion_point(copy_constructor:Codec.Tstring)
}

void Tstring::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tstring_Codec_2eproto.base);
  n1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Tstring::~Tstring() {
  // @@protoc_insertion_point(destructor:Codec.Tstring)
  SharedDtor();
}

void Tstring::SharedDtor() {
  n1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tstring::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tstring& Tstring::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tstring_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tstring::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tstring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tstring::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_n1(), ptr, ctx, "Codec.Tstring.n1");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tstring::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tstring)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_n1()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->n1().data(), static_cast<int>(this->n1().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Codec.Tstring.n1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tstring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tstring)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tstring::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tstring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string n1 = 1;
  if (this->n1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->n1().data(), static_cast<int>(this->n1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Codec.Tstring.n1");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tstring)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tstring::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tstring)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string n1 = 1;
  if (this->n1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->n1().data(), static_cast<int>(this->n1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Codec.Tstring.n1");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tstring)
  return target;
}

size_t Tstring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tstring)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string n1 = 1;
  if (this->n1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tstring::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tstring)
  GOOGLE_DCHECK_NE(&from, this);
  const Tstring* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tstring>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tstring)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tstring)
    MergeFrom(*source);
  }
}

void Tstring::MergeFrom(const Tstring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tstring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1().size() > 0) {

    n1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.n1_);
  }
}

void Tstring::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tstring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tstring::CopyFrom(const Tstring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tstring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tstring::IsInitialized() const {
  return true;
}

void Tstring::Swap(Tstring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tstring::InternalSwap(Tstring* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  n1_.Swap(&other->n1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Tstring::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tbytes::InitAsDefaultInstance() {
}
class Tbytes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tbytes::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tbytes::Tbytes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tbytes)
}
Tbytes::Tbytes(const Tbytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.n1().size() > 0) {
    n1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.n1_);
  }
  // @@protoc_insertion_point(copy_constructor:Codec.Tbytes)
}

void Tbytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tbytes_Codec_2eproto.base);
  n1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Tbytes::~Tbytes() {
  // @@protoc_insertion_point(destructor:Codec.Tbytes)
  SharedDtor();
}

void Tbytes::SharedDtor() {
  n1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tbytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tbytes& Tbytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tbytes_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tbytes::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tbytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tbytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_n1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tbytes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tbytes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_n1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tbytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tbytes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tbytes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tbytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes n1 = 1;
  if (this->n1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tbytes)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tbytes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tbytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes n1 = 1;
  if (this->n1().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tbytes)
  return target;
}

size_t Tbytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tbytes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes n1 = 1;
  if (this->n1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tbytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tbytes)
  GOOGLE_DCHECK_NE(&from, this);
  const Tbytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tbytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tbytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tbytes)
    MergeFrom(*source);
  }
}

void Tbytes::MergeFrom(const Tbytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tbytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1().size() > 0) {

    n1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.n1_);
  }
}

void Tbytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tbytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tbytes::CopyFrom(const Tbytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tbytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tbytes::IsInitialized() const {
  return true;
}

void Tbytes::Swap(Tbytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tbytes::InternalSwap(Tbytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  n1_.Swap(&other->n1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Tbytes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tembeddedmessages_TMsg::InitAsDefaultInstance() {
}
class Tembeddedmessages_TMsg::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tembeddedmessages_TMsg::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tembeddedmessages_TMsg::Tembeddedmessages_TMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tembeddedmessages.TMsg)
}
Tembeddedmessages_TMsg::Tembeddedmessages_TMsg(const Tembeddedmessages_TMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tembeddedmessages.TMsg)
}

void Tembeddedmessages_TMsg::SharedCtor() {
  n1_ = 0;
}

Tembeddedmessages_TMsg::~Tembeddedmessages_TMsg() {
  // @@protoc_insertion_point(destructor:Codec.Tembeddedmessages.TMsg)
  SharedDtor();
}

void Tembeddedmessages_TMsg::SharedDtor() {
}

void Tembeddedmessages_TMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tembeddedmessages_TMsg& Tembeddedmessages_TMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tembeddedmessages_TMsg_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tembeddedmessages_TMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tembeddedmessages.TMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tembeddedmessages_TMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tembeddedmessages_TMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tembeddedmessages.TMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tembeddedmessages.TMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tembeddedmessages.TMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tembeddedmessages_TMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tembeddedmessages.TMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tembeddedmessages.TMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tembeddedmessages_TMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tembeddedmessages.TMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tembeddedmessages.TMsg)
  return target;
}

size_t Tembeddedmessages_TMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tembeddedmessages.TMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n1());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tembeddedmessages_TMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tembeddedmessages.TMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const Tembeddedmessages_TMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tembeddedmessages_TMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tembeddedmessages.TMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tembeddedmessages.TMsg)
    MergeFrom(*source);
  }
}

void Tembeddedmessages_TMsg::MergeFrom(const Tembeddedmessages_TMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tembeddedmessages.TMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tembeddedmessages_TMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tembeddedmessages.TMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tembeddedmessages_TMsg::CopyFrom(const Tembeddedmessages_TMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tembeddedmessages.TMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tembeddedmessages_TMsg::IsInitialized() const {
  return true;
}

void Tembeddedmessages_TMsg::Swap(Tembeddedmessages_TMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tembeddedmessages_TMsg::InternalSwap(Tembeddedmessages_TMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tembeddedmessages_TMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tembeddedmessages::InitAsDefaultInstance() {
  ::Codec::_Tembeddedmessages_default_instance_._instance.get_mutable()->n1_ = const_cast< ::Codec::Tembeddedmessages_TMsg*>(
      ::Codec::Tembeddedmessages_TMsg::internal_default_instance());
}
class Tembeddedmessages::HasBitSetters {
 public:
  static const ::Codec::Tembeddedmessages_TMsg& n1(const Tembeddedmessages* msg);
};

const ::Codec::Tembeddedmessages_TMsg&
Tembeddedmessages::HasBitSetters::n1(const Tembeddedmessages* msg) {
  return *msg->n1_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tembeddedmessages::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tembeddedmessages::Tembeddedmessages()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tembeddedmessages)
}
Tembeddedmessages::Tembeddedmessages(const Tembeddedmessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_n1()) {
    n1_ = new ::Codec::Tembeddedmessages_TMsg(*from.n1_);
  } else {
    n1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Codec.Tembeddedmessages)
}

void Tembeddedmessages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tembeddedmessages_Codec_2eproto.base);
  n1_ = nullptr;
}

Tembeddedmessages::~Tembeddedmessages() {
  // @@protoc_insertion_point(destructor:Codec.Tembeddedmessages)
  SharedDtor();
}

void Tembeddedmessages::SharedDtor() {
  if (this != internal_default_instance()) delete n1_;
}

void Tembeddedmessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tembeddedmessages& Tembeddedmessages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tembeddedmessages_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tembeddedmessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tembeddedmessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && n1_ != nullptr) {
    delete n1_;
  }
  n1_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tembeddedmessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Codec.Tembeddedmessages.TMsg n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_n1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tembeddedmessages::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tembeddedmessages)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Codec.Tembeddedmessages.TMsg n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_n1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tembeddedmessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tembeddedmessages)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tembeddedmessages::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tembeddedmessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Codec.Tembeddedmessages.TMsg n1 = 1;
  if (this->has_n1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::n1(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tembeddedmessages)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tembeddedmessages::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tembeddedmessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Codec.Tembeddedmessages.TMsg n1 = 1;
  if (this->has_n1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::n1(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tembeddedmessages)
  return target;
}

size_t Tembeddedmessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tembeddedmessages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Codec.Tembeddedmessages.TMsg n1 = 1;
  if (this->has_n1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *n1_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tembeddedmessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tembeddedmessages)
  GOOGLE_DCHECK_NE(&from, this);
  const Tembeddedmessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tembeddedmessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tembeddedmessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tembeddedmessages)
    MergeFrom(*source);
  }
}

void Tembeddedmessages::MergeFrom(const Tembeddedmessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tembeddedmessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_n1()) {
    mutable_n1()->::Codec::Tembeddedmessages_TMsg::MergeFrom(from.n1());
  }
}

void Tembeddedmessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tembeddedmessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tembeddedmessages::CopyFrom(const Tembeddedmessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tembeddedmessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tembeddedmessages::IsInitialized() const {
  return true;
}

void Tembeddedmessages::Swap(Tembeddedmessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tembeddedmessages::InternalSwap(Tembeddedmessages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tembeddedmessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TRepeatedfields::InitAsDefaultInstance() {
}
class TRepeatedfields::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TRepeatedfields::kN1FieldNumber;
const int TRepeatedfields::kN2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TRepeatedfields::TRepeatedfields()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.TRepeatedfields)
}
TRepeatedfields::TRepeatedfields(const TRepeatedfields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      n1_(from.n1_),
      n2_(from.n2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Codec.TRepeatedfields)
}

void TRepeatedfields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TRepeatedfields_Codec_2eproto.base);
}

TRepeatedfields::~TRepeatedfields() {
  // @@protoc_insertion_point(destructor:Codec.TRepeatedfields)
  SharedDtor();
}

void TRepeatedfields::SharedDtor() {
}

void TRepeatedfields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TRepeatedfields& TRepeatedfields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TRepeatedfields_Codec_2eproto.base);
  return *internal_default_instance();
}


void TRepeatedfields::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.TRepeatedfields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_.Clear();
  n2_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TRepeatedfields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_n1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_n1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Codec.Tbytes n2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_n2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TRepeatedfields::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.TRepeatedfields)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_n1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_n1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Codec.Tbytes n2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_n2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.TRepeatedfields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.TRepeatedfields)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TRepeatedfields::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.TRepeatedfields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 n1 = 1;
  if (this->n1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_n1_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->n1_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->n1(i), output);
  }

  // repeated .Codec.Tbytes n2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->n2(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.TRepeatedfields)
}

::PROTOBUF_NAMESPACE_ID::uint8* TRepeatedfields::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.TRepeatedfields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 n1 = 1;
  if (this->n1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _n1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->n1_, target);
  }

  // repeated .Codec.Tbytes n2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->n2(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.TRepeatedfields)
  return target;
}

size_t TRepeatedfields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.TRepeatedfields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 n1 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->n1_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Codec.Tbytes n2 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->n2_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->n2(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TRepeatedfields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.TRepeatedfields)
  GOOGLE_DCHECK_NE(&from, this);
  const TRepeatedfields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TRepeatedfields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.TRepeatedfields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.TRepeatedfields)
    MergeFrom(*source);
  }
}

void TRepeatedfields::MergeFrom(const TRepeatedfields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.TRepeatedfields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n1_.MergeFrom(from.n1_);
  n2_.MergeFrom(from.n2_);
}

void TRepeatedfields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.TRepeatedfields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRepeatedfields::CopyFrom(const TRepeatedfields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.TRepeatedfields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRepeatedfields::IsInitialized() const {
  return true;
}

void TRepeatedfields::Swap(TRepeatedfields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TRepeatedfields::InternalSwap(TRepeatedfields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  n1_.InternalSwap(&other->n1_);
  CastToBase(&n2_)->InternalSwap(CastToBase(&other->n2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRepeatedfields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tfixed32::InitAsDefaultInstance() {
}
class Tfixed32::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tfixed32::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tfixed32::Tfixed32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tfixed32)
}
Tfixed32::Tfixed32(const Tfixed32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tfixed32)
}

void Tfixed32::SharedCtor() {
  n1_ = 0u;
}

Tfixed32::~Tfixed32() {
  // @@protoc_insertion_point(destructor:Codec.Tfixed32)
  SharedDtor();
}

void Tfixed32::SharedDtor() {
}

void Tfixed32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tfixed32& Tfixed32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tfixed32_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tfixed32::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tfixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tfixed32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tfixed32::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tfixed32)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tfixed32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tfixed32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tfixed32::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tfixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tfixed32)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tfixed32::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tfixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tfixed32)
  return target;
}

size_t Tfixed32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tfixed32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed32 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tfixed32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tfixed32)
  GOOGLE_DCHECK_NE(&from, this);
  const Tfixed32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tfixed32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tfixed32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tfixed32)
    MergeFrom(*source);
  }
}

void Tfixed32::MergeFrom(const Tfixed32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tfixed32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tfixed32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tfixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tfixed32::CopyFrom(const Tfixed32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tfixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tfixed32::IsInitialized() const {
  return true;
}

void Tfixed32::Swap(Tfixed32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tfixed32::InternalSwap(Tfixed32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tfixed32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tsfixed32::InitAsDefaultInstance() {
}
class Tsfixed32::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsfixed32::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsfixed32::Tsfixed32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tsfixed32)
}
Tsfixed32::Tsfixed32(const Tsfixed32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tsfixed32)
}

void Tsfixed32::SharedCtor() {
  n1_ = 0;
}

Tsfixed32::~Tsfixed32() {
  // @@protoc_insertion_point(destructor:Codec.Tsfixed32)
  SharedDtor();
}

void Tsfixed32::SharedDtor() {
}

void Tsfixed32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsfixed32& Tsfixed32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsfixed32_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tsfixed32::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tsfixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tsfixed32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tsfixed32::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tsfixed32)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tsfixed32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tsfixed32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tsfixed32::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tsfixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 n1 = 1;
  if (this->n1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tsfixed32)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsfixed32::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tsfixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 n1 = 1;
  if (this->n1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tsfixed32)
  return target;
}

size_t Tsfixed32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tsfixed32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed32 n1 = 1;
  if (this->n1() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsfixed32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tsfixed32)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsfixed32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsfixed32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tsfixed32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tsfixed32)
    MergeFrom(*source);
  }
}

void Tsfixed32::MergeFrom(const Tsfixed32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tsfixed32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n1() != 0) {
    set_n1(from.n1());
  }
}

void Tsfixed32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tsfixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsfixed32::CopyFrom(const Tsfixed32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tsfixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsfixed32::IsInitialized() const {
  return true;
}

void Tsfixed32::Swap(Tsfixed32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsfixed32::InternalSwap(Tsfixed32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsfixed32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tfloat::InitAsDefaultInstance() {
}
class Tfloat::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tfloat::kN1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tfloat::Tfloat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.Tfloat)
}
Tfloat::Tfloat(const Tfloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n1_ = from.n1_;
  // @@protoc_insertion_point(copy_constructor:Codec.Tfloat)
}

void Tfloat::SharedCtor() {
  n1_ = 0;
}

Tfloat::~Tfloat() {
  // @@protoc_insertion_point(destructor:Codec.Tfloat)
  SharedDtor();
}

void Tfloat::SharedDtor() {
}

void Tfloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tfloat& Tfloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tfloat_Codec_2eproto.base);
  return *internal_default_instance();
}


void Tfloat::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.Tfloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tfloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tfloat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.Tfloat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float n1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &n1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.Tfloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.Tfloat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tfloat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.Tfloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float n1 = 1;
  if (!(this->n1() <= 0 && this->n1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->n1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.Tfloat)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tfloat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.Tfloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float n1 = 1;
  if (!(this->n1() <= 0 && this->n1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->n1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.Tfloat)
  return target;
}

size_t Tfloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.Tfloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float n1 = 1;
  if (!(this->n1() <= 0 && this->n1() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tfloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.Tfloat)
  GOOGLE_DCHECK_NE(&from, this);
  const Tfloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tfloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.Tfloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.Tfloat)
    MergeFrom(*source);
  }
}

void Tfloat::MergeFrom(const Tfloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.Tfloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.n1() <= 0 && from.n1() >= 0)) {
    set_n1(from.n1());
  }
}

void Tfloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.Tfloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tfloat::CopyFrom(const Tfloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.Tfloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tfloat::IsInitialized() const {
  return true;
}

void Tfloat::Swap(Tfloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tfloat::InternalSwap(Tfloat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n1_, other->n1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tfloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void THasitem::InitAsDefaultInstance() {
  ::Codec::_THasitem_default_instance_._instance.get_mutable()->n8_tbytes_ = const_cast< ::Codec::Tbytes*>(
      ::Codec::Tbytes::internal_default_instance());
}
class THasitem::HasBitSetters {
 public:
  static const ::Codec::Tbytes& n8_tbytes(const THasitem* msg);
};

const ::Codec::Tbytes&
THasitem::HasBitSetters::n8_tbytes(const THasitem* msg) {
  return *msg->n8_tbytes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int THasitem::kN1Int32FieldNumber;
const int THasitem::kN2Int32FieldNumber;
const int THasitem::kN3Uint32FieldNumber;
const int THasitem::kN4Sint32FieldNumber;
const int THasitem::kN5Fixed32FieldNumber;
const int THasitem::kN6FloatFieldNumber;
const int THasitem::kN7BytesFieldNumber;
const int THasitem::kN8TbytesFieldNumber;
const int THasitem::kN9Int32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

THasitem::THasitem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Codec.THasitem)
}
THasitem::THasitem(const THasitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n7_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.n7_bytes().size() > 0) {
    n7_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.n7_bytes_);
  }
  if (from.has_n8_tbytes()) {
    n8_tbytes_ = new ::Codec::Tbytes(*from.n8_tbytes_);
  } else {
    n8_tbytes_ = nullptr;
  }
  ::memcpy(&n2_int32_, &from.n2_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&n1_int32_) -
    reinterpret_cast<char*>(&n2_int32_)) + sizeof(n1_int32_));
  // @@protoc_insertion_point(copy_constructor:Codec.THasitem)
}

void THasitem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_THasitem_Codec_2eproto.base);
  n7_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&n8_tbytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n1_int32_) -
      reinterpret_cast<char*>(&n8_tbytes_)) + sizeof(n1_int32_));
}

THasitem::~THasitem() {
  // @@protoc_insertion_point(destructor:Codec.THasitem)
  SharedDtor();
}

void THasitem::SharedDtor() {
  n7_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete n8_tbytes_;
}

void THasitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const THasitem& THasitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_THasitem_Codec_2eproto.base);
  return *internal_default_instance();
}


void THasitem::Clear() {
// @@protoc_insertion_point(message_clear_start:Codec.THasitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n7_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && n8_tbytes_ != nullptr) {
    delete n8_tbytes_;
  }
  n8_tbytes_ = nullptr;
  ::memset(&n2_int32_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n1_int32_) -
      reinterpret_cast<char*>(&n2_int32_)) + sizeof(n1_int32_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* THasitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n2_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n2_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n3_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n3_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 n4_sint32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n4_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 n5_fixed32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          n5_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // float n6_float = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          n6_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes n7_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_n7_bytes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Codec.Tbytes n8_Tbytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_n8_tbytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n9_int32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          n9_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n1_int32 = 3000;
      case 3000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          n1_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool THasitem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Codec.THasitem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(24005u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 n2_int32 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n2_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n3_uint32 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n3_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 n4_sint32 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &n4_sint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 n5_fixed32 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &n5_fixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float n6_float = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &n6_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes n7_bytes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_n7_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Codec.Tbytes n8_Tbytes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_n8_tbytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n9_int32 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n9_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n1_int32 = 3000;
      case 3000: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24000 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n1_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Codec.THasitem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Codec.THasitem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void THasitem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Codec.THasitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n2_int32 = 2;
  if (this->n2_int32() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->n2_int32(), output);
  }

  // uint32 n3_uint32 = 3;
  if (this->n3_uint32() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->n3_uint32(), output);
  }

  // sint32 n4_sint32 = 4;
  if (this->n4_sint32() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(4, this->n4_sint32(), output);
  }

  // fixed32 n5_fixed32 = 5;
  if (this->n5_fixed32() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(5, this->n5_fixed32(), output);
  }

  // float n6_float = 6;
  if (!(this->n6_float() <= 0 && this->n6_float() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->n6_float(), output);
  }

  // bytes n7_bytes = 7;
  if (this->n7_bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->n7_bytes(), output);
  }

  // .Codec.Tbytes n8_Tbytes = 8;
  if (this->has_n8_tbytes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::n8_tbytes(this), output);
  }

  // int32 n9_int32 = 9;
  if (this->n9_int32() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->n9_int32(), output);
  }

  // int32 n1_int32 = 3000;
  if (this->n1_int32() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3000, this->n1_int32(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Codec.THasitem)
}

::PROTOBUF_NAMESPACE_ID::uint8* THasitem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Codec.THasitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n2_int32 = 2;
  if (this->n2_int32() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->n2_int32(), target);
  }

  // uint32 n3_uint32 = 3;
  if (this->n3_uint32() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->n3_uint32(), target);
  }

  // sint32 n4_sint32 = 4;
  if (this->n4_sint32() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->n4_sint32(), target);
  }

  // fixed32 n5_fixed32 = 5;
  if (this->n5_fixed32() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->n5_fixed32(), target);
  }

  // float n6_float = 6;
  if (!(this->n6_float() <= 0 && this->n6_float() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->n6_float(), target);
  }

  // bytes n7_bytes = 7;
  if (this->n7_bytes().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->n7_bytes(), target);
  }

  // .Codec.Tbytes n8_Tbytes = 8;
  if (this->has_n8_tbytes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::n8_tbytes(this), target);
  }

  // int32 n9_int32 = 9;
  if (this->n9_int32() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->n9_int32(), target);
  }

  // int32 n1_int32 = 3000;
  if (this->n1_int32() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3000, this->n1_int32(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Codec.THasitem)
  return target;
}

size_t THasitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Codec.THasitem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes n7_bytes = 7;
  if (this->n7_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->n7_bytes());
  }

  // .Codec.Tbytes n8_Tbytes = 8;
  if (this->has_n8_tbytes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *n8_tbytes_);
  }

  // int32 n2_int32 = 2;
  if (this->n2_int32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n2_int32());
  }

  // uint32 n3_uint32 = 3;
  if (this->n3_uint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->n3_uint32());
  }

  // sint32 n4_sint32 = 4;
  if (this->n4_sint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->n4_sint32());
  }

  // fixed32 n5_fixed32 = 5;
  if (this->n5_fixed32() != 0) {
    total_size += 1 + 4;
  }

  // float n6_float = 6;
  if (!(this->n6_float() <= 0 && this->n6_float() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 n9_int32 = 9;
  if (this->n9_int32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n9_int32());
  }

  // int32 n1_int32 = 3000;
  if (this->n1_int32() != 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n1_int32());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void THasitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Codec.THasitem)
  GOOGLE_DCHECK_NE(&from, this);
  const THasitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<THasitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Codec.THasitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Codec.THasitem)
    MergeFrom(*source);
  }
}

void THasitem::MergeFrom(const THasitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Codec.THasitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n7_bytes().size() > 0) {

    n7_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.n7_bytes_);
  }
  if (from.has_n8_tbytes()) {
    mutable_n8_tbytes()->::Codec::Tbytes::MergeFrom(from.n8_tbytes());
  }
  if (from.n2_int32() != 0) {
    set_n2_int32(from.n2_int32());
  }
  if (from.n3_uint32() != 0) {
    set_n3_uint32(from.n3_uint32());
  }
  if (from.n4_sint32() != 0) {
    set_n4_sint32(from.n4_sint32());
  }
  if (from.n5_fixed32() != 0) {
    set_n5_fixed32(from.n5_fixed32());
  }
  if (!(from.n6_float() <= 0 && from.n6_float() >= 0)) {
    set_n6_float(from.n6_float());
  }
  if (from.n9_int32() != 0) {
    set_n9_int32(from.n9_int32());
  }
  if (from.n1_int32() != 0) {
    set_n1_int32(from.n1_int32());
  }
}

void THasitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Codec.THasitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THasitem::CopyFrom(const THasitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Codec.THasitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THasitem::IsInitialized() const {
  return true;
}

void THasitem::Swap(THasitem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void THasitem::InternalSwap(THasitem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  n7_bytes_.Swap(&other->n7_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n8_tbytes_, other->n8_tbytes_);
  swap(n2_int32_, other->n2_int32_);
  swap(n3_uint32_, other->n3_uint32_);
  swap(n4_sint32_, other->n4_sint32_);
  swap(n5_fixed32_, other->n5_fixed32_);
  swap(n6_float_, other->n6_float_);
  swap(n9_int32_, other->n9_int32_);
  swap(n1_int32_, other->n1_int32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata THasitem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Codec
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Codec::Tint32* Arena::CreateMaybeMessage< ::Codec::Tint32 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tint64* Arena::CreateMaybeMessage< ::Codec::Tint64 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tint64 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tuint32* Arena::CreateMaybeMessage< ::Codec::Tuint32 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tuint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tuint64* Arena::CreateMaybeMessage< ::Codec::Tuint64 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tuint64 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tsint32* Arena::CreateMaybeMessage< ::Codec::Tsint32 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tsint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tsint64* Arena::CreateMaybeMessage< ::Codec::Tsint64 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tsint64 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tbool* Arena::CreateMaybeMessage< ::Codec::Tbool >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tbool >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tenum* Arena::CreateMaybeMessage< ::Codec::Tenum >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tenum >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tfixed64* Arena::CreateMaybeMessage< ::Codec::Tfixed64 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tfixed64 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tsfixed64* Arena::CreateMaybeMessage< ::Codec::Tsfixed64 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tsfixed64 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tdouble* Arena::CreateMaybeMessage< ::Codec::Tdouble >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tdouble >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tstring* Arena::CreateMaybeMessage< ::Codec::Tstring >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tstring >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tbytes* Arena::CreateMaybeMessage< ::Codec::Tbytes >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tbytes >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tembeddedmessages_TMsg* Arena::CreateMaybeMessage< ::Codec::Tembeddedmessages_TMsg >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tembeddedmessages_TMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tembeddedmessages* Arena::CreateMaybeMessage< ::Codec::Tembeddedmessages >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tembeddedmessages >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::TRepeatedfields* Arena::CreateMaybeMessage< ::Codec::TRepeatedfields >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::TRepeatedfields >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tfixed32* Arena::CreateMaybeMessage< ::Codec::Tfixed32 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tfixed32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tsfixed32* Arena::CreateMaybeMessage< ::Codec::Tsfixed32 >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tsfixed32 >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::Tfloat* Arena::CreateMaybeMessage< ::Codec::Tfloat >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::Tfloat >(arena);
}
template<> PROTOBUF_NOINLINE ::Codec::THasitem* Arena::CreateMaybeMessage< ::Codec::THasitem >(Arena* arena) {
  return Arena::CreateInternal< ::Codec::THasitem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
