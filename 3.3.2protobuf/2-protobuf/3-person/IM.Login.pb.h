// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eLogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eLogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eLogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eLogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace Login {
class Book;
class BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Phone;
class PhoneDefaultTypeInternal;
extern PhoneDefaultTypeInternal _Phone_default_instance_;
class TInt32;
class TInt32DefaultTypeInternal;
extern TInt32DefaultTypeInternal _TInt32_default_instance_;
class TString;
class TStringDefaultTypeInternal;
extern TStringDefaultTypeInternal _TString_default_instance_;
}  // namespace Login
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Login::Book* Arena::CreateMaybeMessage<::IM::Login::Book>(Arena*);
template<> ::IM::Login::Person* Arena::CreateMaybeMessage<::IM::Login::Person>(Arena*);
template<> ::IM::Login::Phone* Arena::CreateMaybeMessage<::IM::Login::Phone>(Arena*);
template<> ::IM::Login::TInt32* Arena::CreateMaybeMessage<::IM::Login::TInt32>(Arena*);
template<> ::IM::Login::TString* Arena::CreateMaybeMessage<::IM::Login::TString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Login {

// ===================================================================

class Phone :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.Phone) */ {
 public:
  Phone();
  virtual ~Phone();

  Phone(const Phone& from);
  Phone(Phone&& from) noexcept
    : Phone() {
    *this = ::std::move(from);
  }

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Phone& operator=(Phone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Phone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Phone* internal_default_instance() {
    return reinterpret_cast<const Phone*>(
               &_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Phone* other);
  friend void swap(Phone& a, Phone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Phone* New() const final {
    return CreateMaybeMessage<Phone>(nullptr);
  }

  Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Phone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Phone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.Phone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);

  // .IM.BaseDefine.PhoneType phone_type = 2;
  void clear_phone_type();
  static const int kPhoneTypeFieldNumber = 2;
  ::IM::BaseDefine::PhoneType phone_type() const;
  void set_phone_type(::IM::BaseDefine::PhoneType value);

  // @@protoc_insertion_point(class_scope:IM.Login.Phone)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  int phone_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class Book :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.Book) */ {
 public:
  Book();
  virtual ~Book();

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Book& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Book* other);
  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Book* New() const final {
    return CreateMaybeMessage<Book>(nullptr);
  }

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Book& from);
  void MergeFrom(const Book& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Book* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.Book";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // float price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  float price() const;
  void set_price(float value);

  // @@protoc_insertion_point(class_scope:IM.Login.Book)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class Person :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.Person";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string languages = 3;
  int languages_size() const;
  void clear_languages();
  static const int kLanguagesFieldNumber = 3;
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();

  // repeated .IM.Login.Book books = 5;
  int books_size() const;
  void clear_books();
  static const int kBooksFieldNumber = 5;
  ::IM::Login::Book* mutable_books(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::Login::Book >*
      mutable_books();
  const ::IM::Login::Book& books(int index) const;
  ::IM::Login::Book* add_books();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::Login::Book >&
      books() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string address = 7;
  void clear_address();
  static const int kAddressFieldNumber = 7;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // .IM.Login.Phone phone = 4;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 4;
  const ::IM::Login::Phone& phone() const;
  ::IM::Login::Phone* release_phone();
  ::IM::Login::Phone* mutable_phone();
  void set_allocated_phone(::IM::Login::Phone* phone);

  // int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool vip = 6;
  void clear_vip();
  static const int kVipFieldNumber = 6;
  bool vip() const;
  void set_vip(bool value);

  // @@protoc_insertion_point(class_scope:IM.Login.Person)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::Login::Book > books_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::IM::Login::Phone* phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  bool vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class TInt32 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.TInt32) */ {
 public:
  TInt32();
  virtual ~TInt32();

  TInt32(const TInt32& from);
  TInt32(TInt32&& from) noexcept
    : TInt32() {
    *this = ::std::move(from);
  }

  inline TInt32& operator=(const TInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline TInt32& operator=(TInt32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TInt32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TInt32* internal_default_instance() {
    return reinterpret_cast<const TInt32*>(
               &_TInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TInt32* other);
  friend void swap(TInt32& a, TInt32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TInt32* New() const final {
    return CreateMaybeMessage<TInt32>(nullptr);
  }

  TInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TInt32>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TInt32& from);
  void MergeFrom(const TInt32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TInt32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.TInt32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 int1 = 1;
  void clear_int1();
  static const int kInt1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 int1() const;
  void set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.TInt32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 int1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class TString :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.TString) */ {
 public:
  TString();
  virtual ~TString();

  TString(const TString& from);
  TString(TString&& from) noexcept
    : TString() {
    *this = ::std::move(from);
  }

  inline TString& operator=(const TString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TString& operator=(TString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TString* internal_default_instance() {
    return reinterpret_cast<const TString*>(
               &_TString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TString* other);
  friend void swap(TString& a, TString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TString* New() const final {
    return CreateMaybeMessage<TString>(nullptr);
  }

  TString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TString& from);
  void MergeFrom(const TString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login.TString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str1 = 1;
  void clear_str1();
  static const int kStr1FieldNumber = 1;
  const std::string& str1() const;
  void set_str1(const std::string& value);
  void set_str1(std::string&& value);
  void set_str1(const char* value);
  void set_str1(const char* value, size_t size);
  std::string* mutable_str1();
  std::string* release_str1();
  void set_allocated_str1(std::string* str1);

  // @@protoc_insertion_point(class_scope:IM.Login.TString)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eLogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Phone

// string number = 1;
inline void Phone::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::number() const {
  // @@protoc_insertion_point(field_get:IM.Login.Phone.number)
  return number_.GetNoArena();
}
inline void Phone::set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Phone.number)
}
inline void Phone::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.Phone.number)
}
inline void Phone::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Phone.number)
}
inline void Phone::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Phone.number)
}
inline std::string* Phone::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Phone.number)
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_number() {
  // @@protoc_insertion_point(field_release:IM.Login.Phone.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Phone.number)
}

// .IM.BaseDefine.PhoneType phone_type = 2;
inline void Phone::clear_phone_type() {
  phone_type_ = 0;
}
inline ::IM::BaseDefine::PhoneType Phone::phone_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.Phone.phone_type)
  return static_cast< ::IM::BaseDefine::PhoneType >(phone_type_);
}
inline void Phone::set_phone_type(::IM::BaseDefine::PhoneType value) {
  
  phone_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Phone.phone_type)
}

// -------------------------------------------------------------------

// Book

// string name = 1;
inline void Book::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Book::name() const {
  // @@protoc_insertion_point(field_get:IM.Login.Book.name)
  return name_.GetNoArena();
}
inline void Book::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Book.name)
}
inline void Book::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.Book.name)
}
inline void Book::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Book.name)
}
inline void Book::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Book.name)
}
inline std::string* Book::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Book.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Book::release_name() {
  // @@protoc_insertion_point(field_release:IM.Login.Book.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Book::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Book.name)
}

// float price = 2;
inline void Book::clear_price() {
  price_ = 0;
}
inline float Book::price() const {
  // @@protoc_insertion_point(field_get:IM.Login.Book.price)
  return price_;
}
inline void Book::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Book.price)
}

// -------------------------------------------------------------------

// Person

// string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.name)
  return name_.GetNoArena();
}
inline void Person::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Person.name)
}
inline void Person::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Person.name)
}
inline std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:IM.Login.Person.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Person.name)
}

// int32 age = 2;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.age)
  return age_;
}
inline void Person::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Person.age)
}

// repeated string languages = 3;
inline int Person::languages_size() const {
  return languages_.size();
}
inline void Person::clear_languages() {
  languages_.Clear();
}
inline const std::string& Person::languages(int index) const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.languages)
  return languages_.Get(index);
}
inline std::string* Person::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.languages)
  return languages_.Mutable(index);
}
inline void Person::set_languages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Login.Person.languages)
  languages_.Mutable(index)->assign(value);
}
inline void Person::set_languages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.Login.Person.languages)
  languages_.Mutable(index)->assign(std::move(value));
}
inline void Person::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.Person.languages)
}
inline void Person::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Person.languages)
}
inline std::string* Person::add_languages() {
  // @@protoc_insertion_point(field_add_mutable:IM.Login.Person.languages)
  return languages_.Add();
}
inline void Person::add_languages(const std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Login.Person.languages)
}
inline void Person::add_languages(std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.Login.Person.languages)
}
inline void Person::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Login.Person.languages)
}
inline void Person::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Login.Person.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::languages() const {
  // @@protoc_insertion_point(field_list:IM.Login.Person.languages)
  return languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:IM.Login.Person.languages)
  return &languages_;
}

// .IM.Login.Phone phone = 4;
inline bool Person::has_phone() const {
  return this != internal_default_instance() && phone_ != nullptr;
}
inline void Person::clear_phone() {
  if (GetArenaNoVirtual() == nullptr && phone_ != nullptr) {
    delete phone_;
  }
  phone_ = nullptr;
}
inline const ::IM::Login::Phone& Person::phone() const {
  const ::IM::Login::Phone* p = phone_;
  // @@protoc_insertion_point(field_get:IM.Login.Person.phone)
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::Login::Phone*>(
      &::IM::Login::_Phone_default_instance_);
}
inline ::IM::Login::Phone* Person::release_phone() {
  // @@protoc_insertion_point(field_release:IM.Login.Person.phone)
  
  ::IM::Login::Phone* temp = phone_;
  phone_ = nullptr;
  return temp;
}
inline ::IM::Login::Phone* Person::mutable_phone() {
  
  if (phone_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::Login::Phone>(GetArenaNoVirtual());
    phone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.phone)
  return phone_;
}
inline void Person::set_allocated_phone(::IM::Login::Phone* phone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phone_;
  }
  if (phone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phone, submessage_arena);
    }
    
  } else {
    
  }
  phone_ = phone;
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Person.phone)
}

// repeated .IM.Login.Book books = 5;
inline int Person::books_size() const {
  return books_.size();
}
inline void Person::clear_books() {
  books_.Clear();
}
inline ::IM::Login::Book* Person::mutable_books(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.books)
  return books_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::Login::Book >*
Person::mutable_books() {
  // @@protoc_insertion_point(field_mutable_list:IM.Login.Person.books)
  return &books_;
}
inline const ::IM::Login::Book& Person::books(int index) const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.books)
  return books_.Get(index);
}
inline ::IM::Login::Book* Person::add_books() {
  // @@protoc_insertion_point(field_add:IM.Login.Person.books)
  return books_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::Login::Book >&
Person::books() const {
  // @@protoc_insertion_point(field_list:IM.Login.Person.books)
  return books_;
}

// bool vip = 6;
inline void Person::clear_vip() {
  vip_ = false;
}
inline bool Person::vip() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.vip)
  return vip_;
}
inline void Person::set_vip(bool value) {
  
  vip_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Person.vip)
}

// string address = 7;
inline void Person::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Person::address() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.address)
  return address_.GetNoArena();
}
inline void Person::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Person.address)
}
inline void Person::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.Person.address)
}
inline void Person::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Person.address)
}
inline void Person::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Person.address)
}
inline std::string* Person::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_address() {
  // @@protoc_insertion_point(field_release:IM.Login.Person.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Person.address)
}

// -------------------------------------------------------------------

// TInt32

// int32 int1 = 1;
inline void TInt32::clear_int1() {
  int1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TInt32::int1() const {
  // @@protoc_insertion_point(field_get:IM.Login.TInt32.int1)
  return int1_;
}
inline void TInt32::set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int1_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.TInt32.int1)
}

// -------------------------------------------------------------------

// TString

// string str1 = 1;
inline void TString::clear_str1() {
  str1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TString::str1() const {
  // @@protoc_insertion_point(field_get:IM.Login.TString.str1)
  return str1_.GetNoArena();
}
inline void TString::set_str1(const std::string& value) {
  
  str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.TString.str1)
}
inline void TString::set_str1(std::string&& value) {
  
  str1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.TString.str1)
}
inline void TString::set_str1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.TString.str1)
}
inline void TString::set_str1(const char* value, size_t size) {
  
  str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.TString.str1)
}
inline std::string* TString::mutable_str1() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.TString.str1)
  return str1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TString::release_str1() {
  // @@protoc_insertion_point(field_release:IM.Login.TString.str1)
  
  return str1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TString::set_allocated_str1(std::string* str1) {
  if (str1 != nullptr) {
    
  } else {
    
  }
  str1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.TString.str1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eLogin_2eproto
