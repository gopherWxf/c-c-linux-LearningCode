// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace Message {
class IMMsgData;
class IMMsgDataDefaultTypeInternal;
extern IMMsgDataDefaultTypeInternal _IMMsgData_default_instance_;
class IMMsgDataAck;
class IMMsgDataAckDefaultTypeInternal;
extern IMMsgDataAckDefaultTypeInternal _IMMsgDataAck_default_instance_;
}  // namespace Message
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Message::IMMsgData* Arena::CreateMaybeMessage<::IM::Message::IMMsgData>(Arena*);
template<> ::IM::Message::IMMsgDataAck* Arena::CreateMaybeMessage<::IM::Message::IMMsgDataAck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Message {

// ===================================================================

class IMMsgData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Message.IMMsgData) */ {
 public:
  IMMsgData();
  virtual ~IMMsgData();

  IMMsgData(const IMMsgData& from);
  IMMsgData(IMMsgData&& from) noexcept
    : IMMsgData() {
    *this = ::std::move(from);
  }

  inline IMMsgData& operator=(const IMMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgData& operator=(IMMsgData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMMsgData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgData* internal_default_instance() {
    return reinterpret_cast<const IMMsgData*>(
               &_IMMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IMMsgData* other);
  friend void swap(IMMsgData& a, IMMsgData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMMsgData* New() const final {
    return CreateMaybeMessage<IMMsgData>(nullptr);
  }

  IMMsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMMsgData& from);
  void MergeFrom(const IMMsgData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMMsgData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMMsgData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg_data = 6;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 6;
  const std::string& msg_data() const;
  void set_msg_data(const std::string& value);
  void set_msg_data(std::string&& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  std::string* mutable_msg_data();
  std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);

  // uint32 from_user_id = 1;
  void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 to_session_id = 2;
  void clear_to_session_id();
  static const int kToSessionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_session_id() const;
  void set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 create_time = 4;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .IM.BaseDefine.MsgType msg_type = 5;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 5;
  ::IM::BaseDefine::MsgType msg_type() const;
  void set_msg_type(::IM::BaseDefine::MsgType value);

  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class IMMsgDataAck :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Message.IMMsgDataAck) */ {
 public:
  IMMsgDataAck();
  virtual ~IMMsgDataAck();

  IMMsgDataAck(const IMMsgDataAck& from);
  IMMsgDataAck(IMMsgDataAck&& from) noexcept
    : IMMsgDataAck() {
    *this = ::std::move(from);
  }

  inline IMMsgDataAck& operator=(const IMMsgDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMMsgDataAck& operator=(IMMsgDataAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMMsgDataAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgDataAck* internal_default_instance() {
    return reinterpret_cast<const IMMsgDataAck*>(
               &_IMMsgDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMMsgDataAck* other);
  friend void swap(IMMsgDataAck& a, IMMsgDataAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMMsgDataAck* New() const final {
    return CreateMaybeMessage<IMMsgDataAck>(nullptr);
  }

  IMMsgDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgDataAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMMsgDataAck& from);
  void MergeFrom(const IMMsgDataAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMMsgDataAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Message.IMMsgDataAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .IM.BaseDefine.SessionType session_type = 4;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);

  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataAck)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMMsgData

// uint32 from_user_id = 1;
inline void IMMsgData::clear_from_user_id() {
  from_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.from_user_id)
  return from_user_id_;
}
inline void IMMsgData::set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.from_user_id)
}

// uint32 to_session_id = 2;
inline void IMMsgData::clear_to_session_id() {
  to_session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::to_session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.to_session_id)
  return to_session_id_;
}
inline void IMMsgData::set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.to_session_id)
}

// uint32 msg_id = 3;
inline void IMMsgData::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_id)
  return msg_id_;
}
inline void IMMsgData::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_id)
}

// uint32 create_time = 4;
inline void IMMsgData::clear_create_time() {
  create_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgData::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.create_time)
  return create_time_;
}
inline void IMMsgData::set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.create_time)
}

// .IM.BaseDefine.MsgType msg_type = 5;
inline void IMMsgData::clear_msg_type() {
  msg_type_ = 0;
}
inline ::IM::BaseDefine::MsgType IMMsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
inline void IMMsgData::set_msg_type(::IM::BaseDefine::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_type)
}

// bytes msg_data = 6;
inline void IMMsgData::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IMMsgData::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_data)
  return msg_data_.GetNoArena();
}
inline void IMMsgData::set_msg_data(const std::string& value) {
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_data)
}
inline void IMMsgData::set_msg_data(std::string&& value) {
  
  msg_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMMsgData.msg_data)
}
inline void IMMsgData::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMMsgData.msg_data)
}
inline void IMMsgData::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMMsgData.msg_data)
}
inline std::string* IMMsgData::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.msg_data)
  return msg_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IMMsgData::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.msg_data)
  
  return msg_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgData::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.msg_data)
}

// bytes attach_data = 20;
inline void IMMsgData::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IMMsgData::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMMsgData::set_attach_data(const std::string& value) {
  
  attach_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.attach_data)
}
inline void IMMsgData::set_attach_data(std::string&& value) {
  
  attach_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMMsgData.attach_data)
}
inline void IMMsgData::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMMsgData.attach_data)
}
inline void IMMsgData::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMMsgData.attach_data)
}
inline std::string* IMMsgData::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.attach_data)
  return attach_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IMMsgData::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.attach_data)
  
  return attach_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgData::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.attach_data)
}

// -------------------------------------------------------------------

// IMMsgDataAck

// uint32 user_id = 1;
inline void IMMsgDataAck::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.user_id)
  return user_id_;
}
inline void IMMsgDataAck::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.user_id)
}

// uint32 session_id = 2;
inline void IMMsgDataAck::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_id)
  return session_id_;
}
inline void IMMsgDataAck::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_id)
}

// uint32 msg_id = 3;
inline void IMMsgDataAck::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMMsgDataAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.msg_id)
  return msg_id_;
}
inline void IMMsgDataAck::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
inline void IMMsgDataAck::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMMsgDataAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMMsgDataAck::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eMessage_2eproto
